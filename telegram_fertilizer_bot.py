import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=TOKEN, default=types.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ª—ñ–º—ñ—Ç –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
FREE_LIMIT = 1
user_usage = {}

# –°—Ç–∞–Ω–∏ –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
class FertilizerForm(StatesGroup):
    crop = State()
    soil_type = State()
    prev_crop = State()
    yield_goal = State()

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")],
        [KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")]
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ä—Ç—É
@dp.message_handler(commands=['start'])
async def start(message: types.Message, state: FSMContext):
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=main_menu)
    await state.clear()

# –í–∏–±—ñ—Ä –∫—É–ª—å—Ç—É—Ä–∏
@dp.message_handler(lambda message: message.text == "üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")
async def select_crop(message: types.Message, state: FSMContext):
    crops = ["–ö—É–∫—É—Ä—É–¥–∑–∞", "–ü—à–µ–Ω–∏—Ü—è", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫"]
    crop_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for crop in crops:
        crop_kb.add(KeyboardButton(crop))
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=crop_kb)
    await state.set_state(FertilizerForm.crop)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏
@dp.message_handler(state=FertilizerForm.crop)
async def process_crop(message: types.Message, state: FSMContext):
    await state.update_data(crop=message.text)
    soils = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—É–ø—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π"]
    soil_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for soil in soils:
        soil_kb.add(KeyboardButton(soil))
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:", reply_markup=soil_kb)
    await state.set_state(FertilizerForm.soil_type)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É “ë—Ä—É–Ω—Ç—É
@dp.message_handler(state=FertilizerForm.soil_type)
async def process_soil(message: types.Message, state: FSMContext):
    await state.update_data(soil_type=message.text)
    prev_crops = ["–ë–æ–±–æ–≤—ñ", "–ó–µ—Ä–Ω–æ–≤—ñ", "–¢–µ—Ö–Ω—ñ—á–Ω—ñ", "–û–≤–æ—á—ñ"]
    prev_crop_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for prev in prev_crops:
        prev_crop_kb.add(KeyboardButton(prev))
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫:", reply_markup=prev_crop_kb)
    await state.set_state(FertilizerForm.prev_crop)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∞
@dp.message_handler(state=FertilizerForm.prev_crop)
async def process_prev_crop(message: types.Message, state: FSMContext):
    await state.update_data(prev_crop=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–ª–∞–Ω–æ–≤—É –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å —É —Ü/–≥–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 80):")
    await state.set_state(FertilizerForm.yield_goal)

# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤
@dp.message_handler(state=FertilizerForm.yield_goal)
async def process_yield_goal(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    crop = user_data['crop']
    soil_type = user_data['soil_type']
    prev_crop = user_data['prev_crop']
    try:
        yield_goal = int(message.text)
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        return
    
    # –õ–æ–≥—ñ–∫–∞ –ø—ñ–¥–±–æ—Ä—É –¥–æ–±—Ä–∏–≤
    recommendation = {
        "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ –¥–æ–±—Ä–∏–≤–∞": "NPK 16-16-16 - 250 –∫–≥/–≥–∞",
        "–ê–∑–æ—Ç–Ω—ñ": "–ö–ê–°-32 - 100 –∫–≥/–≥–∞",
        "–°—ñ—Ä—á–∞–Ω—ñ": "–°—É–ª—å—Ñ–∞—Ç –∞–º–æ–Ω—ñ—é - 80 –∫–≥/–≥–∞",
        "–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å": "120$/–≥–∞"
    }
    
    response = f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è {crop} ({yield_goal} —Ü/–≥–∞)\n"
    response += f"üü¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ: {recommendation['–ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ –¥–æ–±—Ä–∏–≤–∞']}\n"
    response += f"üîµ –ê–∑–æ—Ç–Ω—ñ: {recommendation['–ê–∑–æ—Ç–Ω—ñ']}\n"
    response += f"üü° –°—ñ—Ä—á–∞–Ω—ñ: {recommendation['–°—ñ—Ä—á–∞–Ω—ñ']}\n"
    response += f"üí≤ –í–∞—Ä—Ç—ñ—Å—Ç—å: {recommendation['–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å']}\n"
    
    buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤", callback_data="change_fertilizers")],
            [InlineKeyboardButton(text="üí∞ –í—Ä–∞—Ö—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ “ë—Ä—É–Ω—Ç—É", callback_data="paid_analysis")]
        ]
    )
    await message.answer(response, reply_markup=buttons)
    await state.clear()

# –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == "change_fertilizers")
async def change_fertilizers(callback: types.CallbackQuery):
    await callback.message.answer("‚öô –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ–±—Ä–∏–≤... (—Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)")

@dp.callback_query_handler(lambda c: c.data == "paid_analysis")
async def paid_analysis(callback: types.CallbackQuery):
    await callback.message.answer("üí∞ –í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É “ë—Ä—É–Ω—Ç—É –º–æ–∂–ª–∏–≤–µ –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ (—Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ).")

if __name__ == "__main__":
    import asyncio
    from aiogram import executor
    asyncio.run(dp.start_polling(bot))
