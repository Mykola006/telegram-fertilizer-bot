import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import logging
from aiohttp import web
import requests

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/{TOKEN}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ø–∏—Å–æ–∫ –∫—É–ª—å—Ç—É—Ä, —Ç–∏–ø—ñ–≤ “ë—Ä—É–Ω—Ç—É, –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤, –æ–±–ª–∞—Å—Ç–µ–π
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—É–ø—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–ü—ñ–¥–∑–æ–ª–∏—Å—Ç–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–û–ª—ñ–π–Ω—ñ"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]
regions = ["–ö–∏—ó–≤—Å—å–∫–∞", "–õ—å–≤—ñ–≤—Å—å–∫–∞", "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", "–û–¥–µ—Å—å–∫–∞", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", "–ß–µ—Ä–∫–∞—Å—å–∫–∞"]

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
price_per_kg = {"N": 0.8, "P": 1.2, "K": 1.0}  # –¶—ñ–Ω–∏ –Ω–∞ –¥–æ–±—Ä–∏–≤–∞
base_yield = 6.0  # –ë–∞–∑–æ–≤–∞ –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å —É —Ç/–≥–∞

def get_weather_data(region):
    weather_api_url = f"https://api.open-meteo.com/v1/forecast?latitude=49.0&longitude=32.0&daily=precipitation_sum&timezone=Europe/Kiev"
    response = requests.get(weather_api_url)
    if response.status_code == 200:
        data = response.json()
        return data.get("daily", {}).get("precipitation_sum", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
    return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"

def adjust_for_soil_analysis(fertilizer_rates, soil_analysis):
    return {key: max(0, fertilizer_rates[key] - soil_analysis.get(key, 0)) for key in fertilizer_rates}

def adjust_for_yield(fertilizer_rates, planned_yield):
    factor = planned_yield / base_yield
    return {key: round(fertilizer_rates[key] * factor) for key in fertilizer_rates}

def split_fertilization(fertilizer_rates):
    return {
        "–û—Å–Ω–æ–≤–Ω–µ –≤–Ω–µ—Å–µ–Ω–Ω—è": {key: round(fertilizer_rates[key] * 0.5) for key in fertilizer_rates},
        "–ü–µ—Ä–µ–¥–ø–æ—Å—ñ–≤–Ω–µ": {key: round(fertilizer_rates[key] * 0.3) for key in fertilizer_rates},
        "–ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è": {key: round(fertilizer_rates[key] * 0.2) for key in fertilizer_rates}
    }

def calculate_fertilizer_cost(fertilizer_rates):
    return sum(fertilizer_rates[element] * price_per_kg[element] for element in ["N", "P", "K"])

def adjust_for_soil_ph(soil_ph, target_ph=6.5):
    if soil_ph < target_ph:
        return f"–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–Ω–µ—Å–µ–Ω–Ω—è –≤–∞–ø–Ω–∞: {round((target_ph - soil_ph) * 2, 1)} —Ç/–≥–∞"
    return "pH “ë—Ä—É–Ω—Ç—É –≤ –Ω–æ—Ä–º—ñ, –≤–∞–ø–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ."

def check_climate_risks(moisture):
    if moisture == "–ù–∏–∑—å–∫–∞":
        return "‚ö†Ô∏è –†–∏–∑–∏–∫ –Ω–∏–∑—å–∫–æ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–æ–±—Ä–∏–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å—Ç–∞—á—É –≤–æ–ª–æ–≥–∏! –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥—Ä–æ–±–æ–≤–µ –≤–Ω–µ—Å–µ–Ω–Ω—è."
    return "‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —É–º–æ–≤–∏ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–Ω—è –¥–æ–±—Ä–∏–≤."

def optimize_fertilizer_budget(fertilizer_rates, budget):
    total_cost = calculate_fertilizer_cost(fertilizer_rates)
    if total_cost > budget:
        factor = budget / total_cost
        return {key: round(fertilizer_rates[key] * factor) for key in fertilizer_rates}
    return fertilizer_rates

@dp.message(lambda message: message.text in regions)
async def select_region(message: types.Message, state: FSMContext):
    await state.update_data(region=message.text)
    weather_info = get_weather_data(message.text)
    await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ {message.text} –æ–±–ª–∞—Å—Ç—å. –û—Å—Ç–∞–Ω–Ω—ñ –º–µ—Ç–µ–æ–¥–∞–Ω—ñ: {weather_info}")

@dp.message(lambda message: message.text in moisture_zones)
async def calculate_fertilizers(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if not all(key in user_data for key in ["crop", "soil", "previous_crop", "region"]):
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞! –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.")
        return
    
    crop, soil, prev_crop, moisture, region = user_data["crop"], user_data["soil"], user_data["previous_crop"], message.text, user_data["region"]
    weather_info = get_weather_data(region)

    response = f"""
üîç **–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ**:
üåæ –ö—É–ª—å—Ç—É—Ä–∞: {crop}
ü™µ –ü–æ–ø–µ—Ä–µ–¥–Ω–∏–∫: {prev_crop}
üåç –¢–∏–ø “ë—Ä—É–Ω—Ç—É: {soil}
üíß –ó–æ–Ω–∞ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è: {moisture}
üìç –û–±–ª–∞—Å—Ç—å: {region}
‚òÅÔ∏è –û—Å—Ç–∞–Ω–Ω—ñ –º–µ—Ç–µ–æ–¥–∞–Ω—ñ: {weather_info}
"""
    await message.answer(response)

if __name__ == "__main__":
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
