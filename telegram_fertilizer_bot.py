import asyncio
import os
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∏–±–æ—Ä—É
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—ñ—Ä–æ–∑–µ–º", "–ü—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–°—É–ø—ñ—â–∞–Ω–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–¢–µ—Ö–Ω—ñ—á–Ω—ñ", "–û–≤–æ—á—ñ", "–ß–∏—Å—Ç–∏–π –ø–∞—Ä"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]

# –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω—ñ –ø–æ—Ç—Ä–µ–±–∏ –∫—É–ª—å—Ç—É—Ä —É NPK (–Ω–∞ 1 —Ü –≤—Ä–æ–∂–∞—é)
crop_requirements = {
    "–ü—à–µ–Ω–∏—Ü—è": {"N": 2.5, "P": 1.2, "K": 2.0},
    "–ö—É–∫—É—Ä—É–¥–∑–∞": {"N": 2.8, "P": 1.0, "K": 2.5},
    "–°–æ–Ω—è—à–Ω–∏–∫": {"N": 3.0, "P": 1.5, "K": 3.5},
    "–†—ñ–ø–∞–∫": {"N": 3.2, "P": 1.8, "K": 2.8},
    "–Ø—á–º—ñ–Ω—å": {"N": 2.3, "P": 1.1, "K": 1.8},
    "–°–æ—è": {"N": 4.0, "P": 1.6, "K": 2.2},
}

# –°–µ—Ä–µ–¥–Ω—ñ–π –≤–º—ñ—Å—Ç –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É “ë—Ä—É–Ω—Ç—ñ (–∫–≥/–≥–∞)
soil_npk = {
    "–ß–æ—Ä–Ω–æ–∑–µ–º": {"N": 60, "P": 40, "K": 180},
    "–°—ñ—Ä–æ–∑–µ–º": {"N": 40, "P": 30, "K": 150},
    "–ü—ñ—â–∞–Ω–∏–π": {"N": 30, "P": 20, "K": 100},
    "–ì–ª–∏–Ω–∏—Å—Ç–∏–π": {"N": 50, "P": 35, "K": 170},
    "–°—É–ø—ñ—â–∞–Ω–∏–π": {"N": 35, "P": 25, "K": 120},
}

# –í–ø–ª–∏–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∞ (–Ω–∞ –∑–Ω–∏–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä–µ–±–∏ —É NPK)
previous_crop_factor = {
    "–ó–µ—Ä–Ω–æ–≤—ñ": {"N": 1.0, "P": 1.0, "K": 1.0},
    "–ë–æ–±–æ–≤—ñ": {"N": 0.8, "P": 1.0, "K": 1.0},
    "–¢–µ—Ö–Ω—ñ—á–Ω—ñ": {"N": 1.1, "P": 1.2, "K": 1.1},
    "–û–≤–æ—á—ñ": {"N": 1.2, "P": 1.3, "K": 1.2},
    "–ß–∏—Å—Ç–∏–π –ø–∞—Ä": {"N": 0.9, "P": 1.0, "K": 1.0},
}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_selection = {}

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def create_keyboard(options):
    keyboard = [[KeyboardButton(text=option)] for option in options]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_selection[message.chat.id] = {}
    await message.answer("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=create_keyboard(crops))

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–±–æ—Ä—É
@dp.message()
async def handle_message(message: Message):
    user_id = message.chat.id
    text = message.text

    if text in crops:
        user_selection[user_id]["crop"] = text
        await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫—É–ª—å—Ç—É—Ä—É: <b>{text}</b>. –í–≤–µ–¥—ñ—Ç—å –ø–ª–∞–Ω–æ–≤—É –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å —É —Ü/–≥–∞:")

    elif text.isdigit():
        user_selection[user_id]["yield"] = int(text)
        await message.answer("–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:", reply_markup=create_keyboard(soil_types))

    elif text in soil_types:
        user_selection[user_id]["soil"] = text
        await message.answer("–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫:", reply_markup=create_keyboard(previous_crops))

    elif text in previous_crops:
        user_selection[user_id]["previous_crop"] = text
        await message.answer("–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è:", reply_markup=create_keyboard(moisture_zones))

    elif text in moisture_zones:
        user_selection[user_id]["moisture"] = text

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        crop = user_selection[user_id]["crop"]
        planned_yield = user_selection[user_id]["yield"]
        soil = user_selection[user_id]["soil"]
        prev_crop = user_selection[user_id]["previous_crop"]

        # –ë–∞–∑–æ–≤–∞ –ø–æ—Ç—Ä–µ–±–∞ –≤ –¥–æ–±—Ä–∏–≤–∞—Ö
        n_need = crop_requirements[crop]["N"] * planned_yield
        p_need = crop_requirements[crop]["P"] * planned_yield
        k_need = crop_requirements[crop]["K"] * planned_yield

        # –í—ñ–¥–Ω—ñ–º–∞—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∞—Å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É “ë—Ä—É–Ω—Ç—ñ
        n_need -= soil_npk[soil]["N"]
        p_need -= soil_npk[soil]["P"]
        k_need -= soil_npk[soil]["K"]

        # –í—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫
        n_need *= previous_crop_factor[prev_crop]["N"]
        p_need *= previous_crop_factor[prev_crop]["P"]
        k_need *= previous_crop_factor[prev_crop]["K"]

        # –ü—ñ–¥–±—ñ—Ä –¥–æ–±—Ä–∏–≤
        fertilizer_plan = (
            f"‚úÖ –û—Å–Ω–æ–≤–Ω–µ –≤–Ω–µ—Å–µ–Ω–Ω—è: NPK 10-26-26 - {round(p_need * 2, 1)} –∫–≥/–≥–∞\n"
            f"üîπ –ü–µ—Ä–µ–¥–ø–æ—Å—ñ–≤–Ω–µ —É–¥–æ–±—Ä–µ–Ω–Ω—è: NPK 16-16-16 - {round((p_need + k_need) * 1.5, 1)} –∫–≥/–≥–∞\n"
            f"üå± –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è –∞–∑–æ—Ç–æ–º: –ö–ê–° 32% - {round(n_need / 2, 1)} –∫–≥/–≥–∞\n"
        )

        await message.answer(f"üìå <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b>\n{fertilizer_plan}", parse_mode="HTML")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
