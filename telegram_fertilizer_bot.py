import logging
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types.input_file import InputFile
import pdfkit
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è wkhtmltopdf
WKHTMLTOPDF_PATH = "/usr/bin/wkhtmltopdf"  # –®–ª—è—Ö –º–æ–∂–µ –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—å —É –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞
config = pdfkit.configuration(wkhtmltopdf=WKHTMLTOPDF_PATH)

# –ö–ª–∞—Å–∏ —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
class FertilizerCalculation(StatesGroup):
    crop = State()
    yield_goal = State()
    area = State()
    soil_type = State()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–æ–±—Ä–∏–≤
async def calculate_fertilizer(crop, yield_goal, area, soil_type):
    nutrient_requirements = {
        "–ø—à–µ–Ω–∏—Ü—è": {"N": 30, "P": 10, "K": 20},
        "–∫—É–∫—É—Ä—É–¥–∑–∞": {"N": 25, "P": 12, "K": 25},
        "—Å–æ–Ω—è—à–Ω–∏–∫": {"N": 42, "P": 18, "K": 85},
        "—Å–æ—è": {"N": 15, "P": 20, "K": 30},
        "—Ä—ñ–ø–∞–∫": {"N": 50, "P": 15, "K": 40}
    }
    
    if crop not in nutrient_requirements:
        return "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–∞ –∫—É–ª—å—Ç—É—Ä–∞."
    
    needs = nutrient_requirements[crop]
    n_fertilizer = needs["N"] * yield_goal * area
    p_fertilizer = needs["P"] * yield_goal * area
    k_fertilizer = needs["K"] * yield_goal * area
    
    return f"üîπ –î–ª—è {crop} –Ω–∞ –ø–ª–æ—â—ñ {area} –≥–∞ –∑ –º–µ—Ç–æ—é {yield_goal} —Ç/–≥–∞:\n"            f"    - –ê–∑–æ—Ç (N): {n_fertilizer} –∫–≥\n"            f"    - –§–æ—Å—Ñ–æ—Ä (P): {p_fertilizer} –∫–≥\n"            f"    - –ö–∞–ª—ñ–π (K): {k_fertilizer} –∫–≥"

# –§—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è PDF
async def generate_pdf(data):
    filename = "recommendation.pdf"
    html = f"<html><body><h2>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –∂–∏–≤–ª–µ–Ω–Ω—é</h2><p>{data}</p></body></html>"
    pdfkit.from_string(html, filename, configuration=config)
    return filename

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤", callback_data="calc_fertilizer")],
        [InlineKeyboardButton(text="üå± –î–æ–≤—ñ–¥–Ω–∏–∫ –∫—É–ª—å—Ç—É—Ä", callback_data="crop_guide")],
        [InlineKeyboardButton(text="üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ PDF", callback_data="get_pdf")]
    ])
    await message.answer("–í—ñ—Ç–∞—é! –Ø –±–æ—Ç-–∞–≥—Ä–æ–Ω–æ–º. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–æ–±—Ä–∏–≤
@dp.callback_query(lambda c: c.data == "calc_fertilizer")
async def ask_crop(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(FertilizerCalculation.crop)
    await callback_query.message.answer("üåæ –í–≤–µ–¥—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É (–ø—à–µ–Ω–∏—Ü—è, –∫—É–∫—É—Ä—É–¥–∑–∞, —Å–æ–Ω—è—à–Ω–∏–∫, —Å–æ—è, —Ä—ñ–ø–∞–∫):")

@dp.message(FertilizerCalculation.crop)
async def ask_yield_goal(message: types.Message, state: FSMContext):
    await state.update_data(crop=message.text.lower())
    await state.set_state(FertilizerCalculation.yield_goal)
    await message.answer("üìä –í–≤–µ–¥—ñ—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω—É –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å (—Ç/–≥–∞):")

@dp.message(FertilizerCalculation.yield_goal)
async def ask_area(message: types.Message, state: FSMContext):
    await state.update_data(yield_goal=float(message.text))
    await state.set_state(FertilizerCalculation.area)
    await message.answer("üìè –í–≤–µ–¥—ñ—Ç—å –ø–ª–æ—â—É –ø–æ–ª—è (–≥–∞):")

@dp.message(FertilizerCalculation.area)
async def ask_soil_type(message: types.Message, state: FSMContext):
    await state.update_data(area=float(message.text))
    await state.set_state(FertilizerCalculation.soil_type)
    await message.answer("üü§ –í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É (—á–æ—Ä–Ω–æ–∑–µ–º, —Å—É–ø—ñ—â–∞–Ω–∏–π, –≥–ª–∏–Ω–∏—Å—Ç–∏–π):")

@dp.message(FertilizerCalculation.soil_type)
async def show_result(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    crop = user_data["crop"]
    yield_goal = user_data["yield_goal"]
    area = user_data["area"]
    soil_type = message.text.lower()
    
    result = await calculate_fertilizer(crop, yield_goal, area, soil_type)
    await message.answer(result)
    await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF
@dp.callback_query(lambda c: c.data == "get_pdf")
async def send_pdf(callback_query: types.CallbackQuery):
    pdf_file = await generate_pdf("–ü—Ä–∏–∫–ª–∞–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –ø–æ –∂–∏–≤–ª–µ–Ω–Ω—é")
    await bot.send_document(callback_query.from_user.id, InputFile(pdf_file))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
