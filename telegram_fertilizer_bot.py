import os

try:
    import requests
except ModuleNotFoundError:
    import os
    os.system("pip install requests")
    import requests

try:
    import matplotlib.pyplot as plt
except ModuleNotFoundError:
    import os
    os.system("pip install matplotlib")
    import matplotlib.pyplot as plt

import numpy as np
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import logging
import asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ø–∏—Å–æ–∫ –∫—É–ª—å—Ç—É—Ä, —Ç–∏–ø—ñ–≤ “ë—Ä—É–Ω—Ç—É, –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤, –æ–±–ª–∞—Å—Ç–µ–π
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—É–ø—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–ü—ñ–¥–∑–æ–ª–∏—Å—Ç–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–û–ª—ñ–π–Ω—ñ"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]
regions = ["–ö–∏—ó–≤—Å—å–∫–∞", "–õ—å–≤—ñ–≤—Å—å–∫–∞", "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", "–û–¥–µ—Å—å–∫–∞", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", "–ß–µ—Ä–∫–∞—Å—å–∫–∞"]

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫—É–ª—å—Ç—É—Ä —Ç–∞ –ø–æ—Ç—Ä–µ–± —É –¥–æ–±—Ä–∏–≤–∞—Ö
fertilizer_db = {
    "–ü—à–µ–Ω–∏—Ü—è": {"N": 120, "P": 60, "K": 90, "pH": 6.2},
    "–ö—É–∫—É—Ä—É–¥–∑–∞": {"N": 150, "P": 80, "K": 100, "pH": 6.5},
    "–°–æ–Ω—è—à–Ω–∏–∫": {"N": 90, "P": 50, "K": 70, "pH": 6.3},
    "–†—ñ–ø–∞–∫": {"N": 180, "P": 90, "K": 110, "pH": 6.5},
    "–Ø—á–º—ñ–Ω—å": {"N": 110, "P": 55, "K": 80, "pH": 6.1},
    "–°–æ—è": {"N": 50, "P": 40, "K": 60, "pH": 6.8}
}

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
price_per_kg = {"N": 0.8, "P": 1.2, "K": 1.0}  # –¶—ñ–Ω–∏ –Ω–∞ –¥–æ–±—Ä–∏–≤–∞

# –ë–∞–ª–∞–Ω—Å –ø–æ–∂–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω –ø—ñ—Å–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏
previous_crop_balance = {
    "–ó–µ—Ä–Ω–æ–≤—ñ": {"N": -20, "P": 0, "K": -10},
    "–ë–æ–±–æ–≤—ñ": {"N": 30, "P": 5, "K": 10},
    "–û–ª—ñ–π–Ω—ñ": {"N": -10, "P": -5, "K": -15}
}

# –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–æ—Ç—Ä–µ–±–∏ —É –¥–æ–±—Ä–∏–≤–∞—Ö –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–∞–ª–∏—à–∫—ñ–≤
def calculate_adjusted_fertilizers(crop, prev_crop):
    base_needs = fertilizer_db[crop]
    adjustments = previous_crop_balance.get(prev_crop, {"N": 0, "P": 0, "K": 0})
    return {
        "N": max(0, base_needs["N"] + adjustments["N"]),
        "P": max(0, base_needs["P"] + adjustments["P"]),
        "K": max(0, base_needs["K"] + adjustments["K"]),
    }

# –ö–ª—ñ–º–∞—Ç–∏—á–Ω—ñ —Ñ–∞–∫—Ç–æ—Ä–∏ (–æ–ø–∞–¥–∏)
def get_climatic_adjustment(region):
    climatic_data = {
        "–ö–∏—ó–≤—Å—å–∫–∞": 600,
        "–õ—å–≤—ñ–≤—Å—å–∫–∞": 700,
        "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞": 550,
        "–û–¥–µ—Å—å–∫–∞": 400,
        "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞": 500,
        "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞": 520,
        "–ß–µ—Ä–∫–∞—Å—å–∫–∞": 580
    }
    avg_rainfall = climatic_data.get(region, 550)
    if avg_rainfall < 500:
        return {"N": -10, "P": 0, "K": -5}
    elif avg_rainfall > 650:
        return {"N": 10, "P": 5, "K": 5}
    return {"N": 0, "P": 0, "K": 0}

@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É"))
    keyboard.add(KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"))
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=keyboard)

async def main():
    logging.basicConfig(level=logging.INFO)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
