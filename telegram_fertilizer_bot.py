import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ –∫—É–ª—å—Ç—É—Ä, —Ç–∏–ø—ñ–≤ “ë—Ä—É–Ω—Ç—É, –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—ñ—Ä–æ–∑–µ–º", "–ü—ñ–¥–∑–æ–ª–∏—Å—Ç–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–°—É–ø—ñ—â–∞–Ω–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–¢–µ—Ö–Ω—ñ—á–Ω—ñ", "–û–≤–æ—á—ñ", "–ß–∏—Å—Ç–∏–π –ø–∞—Ä"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def create_keyboard(options):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for option in options:
        keyboard.add(KeyboardButton(option))
    return keyboard

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É"), KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"))

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:",
                        reply_markup=create_keyboard(crops))

# –í–∏–±—ñ—Ä –∫—É–ª—å—Ç—É—Ä–∏
@dp.message_handler(lambda message: message.text in crops)
async def select_soil(message: types.Message):
    crop = message.text
    await message.reply(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: {crop}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:", reply_markup=create_keyboard(soil_types))

# –í–∏–±—ñ—Ä “ë—Ä—É–Ω—Ç—É
@dp.message_handler(lambda message: message.text in soil_types)
async def select_previous_crop(message: types.Message):
    soil = message.text
    await message.reply(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: {soil}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫:", reply_markup=create_keyboard(previous_crops))

# –í–∏–±—ñ—Ä –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∞
@dp.message_handler(lambda message: message.text in previous_crops)
async def select_moisture_zone(message: types.Message):
    prev_crop = message.text
    await message.reply(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: {prev_crop}. –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è:", reply_markup=create_keyboard(moisture_zones))

# –í–∏–±—ñ—Ä –∑–æ–Ω–∏ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è
@dp.message_handler(lambda message: message.text in moisture_zones)
async def calculate_fertilizer(message: types.Message):
    moisture = message.text
    await message.reply(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è: {moisture}. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ—Ä–º—É –¥–æ–±—Ä–∏–≤...")

    # –õ–æ–≥—ñ–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–æ–±—Ä–∏–≤
    recommendation = {
        "NPK": "10-26-26",  # –ö–æ–º–ø–ª–µ–∫—Å–Ω–µ –¥–æ–±—Ä–∏–≤–æ
        "Sulfur": "5-10 –∫–≥",
        "Nitrogen": "50-100 –∫–≥",
        "Cost_per_ha": "120$"
    }

    response = (
        f"‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –º–∞—Ä–∫–∞ –¥–æ–±—Ä–∏–≤:</b> {recommendation['NPK']}\n"
        f"üåø <b>–°—ñ—Ä–∫–∞:</b> {recommendation['Sulfur']}\n"
        f"‚ö° <b>–ê–∑–æ—Ç:</b> {recommendation['Nitrogen']}\n"
        f"üí∞ <b>–°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞ 1 –≥–∞:</b> {recommendation['Cost_per_ha']}"
    )

    await message.reply(response, reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤"), KeyboardButton("‚úÖ –í—Ä–∞—Ö—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ “ë—Ä—É–Ω—Ç—É")
    ))

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—Ä–∞—Ö—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ “ë—Ä—É–Ω—Ç—É"
@dp.message_handler(lambda message: message.text == "‚úÖ –í—Ä–∞—Ö—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ “ë—Ä—É–Ω—Ç—É")
async def handle_analysis_request(message: types.Message):
    await message.reply("üìä –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å: simoxa@ukr.net")

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤"
@dp.message_handler(lambda message: message.text == "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤")
async def change_fertilizer_brands(message: types.Message):
    await message.reply("üí° –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—ñ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤:", reply_markup=create_keyboard(["NPK 12-24-12", "NPK 15-15-15", "NPK 20-20-20"]))

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
