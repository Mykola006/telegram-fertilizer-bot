import os
import requests
import matplotlib.pyplot as plt
import numpy as np
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import logging
from aiohttp import web

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/{TOKEN}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ø–∏—Å–æ–∫ –∫—É–ª—å—Ç—É—Ä, —Ç–∏–ø—ñ–≤ “ë—Ä—É–Ω—Ç—É, –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤, –æ–±–ª–∞—Å—Ç–µ–π
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—É–ø—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–ü—ñ–¥–∑–æ–ª–∏—Å—Ç–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–û–ª—ñ–π–Ω—ñ"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]
regions = ["–ö–∏—ó–≤—Å—å–∫–∞", "–õ—å–≤—ñ–≤—Å—å–∫–∞", "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", "–û–¥–µ—Å—å–∫–∞", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", "–ß–µ—Ä–∫–∞—Å—å–∫–∞"]

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
price_per_kg = {"N": 0.8, "P": 1.2, "K": 1.0}  # –¶—ñ–Ω–∏ –Ω–∞ –¥–æ–±—Ä–∏–≤–∞
base_yield = 6.0  # –ë–∞–∑–æ–≤–∞ –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å —É —Ç/–≥–∞

def get_weather_data(region):
    weather_api_url = f"https://api.open-meteo.com/v1/forecast?latitude=49.0&longitude=32.0&daily=precipitation_sum&timezone=Europe/Kiev"
    response = requests.get(weather_api_url)
    if response.status_code == 200:
        data = response.json()
        return data.get("daily", {}).get("precipitation_sum", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
    return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"

def calculate_fertilizer_cost(fertilizer_rates):
    return sum(fertilizer_rates[element] * price_per_kg[element] for element in ["N", "P", "K"])

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
async def generate_fertilizer_chart(data):
    elements = list(data.keys())
    values = list(data.values())
    plt.figure(figsize=(6, 4))
    plt.bar(elements, values, color=['blue', 'green', 'red'])
    plt.xlabel("–ï–ª–µ–º–µ–Ω—Ç–∏")
    plt.ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å (–∫–≥/–≥–∞)")
    plt.title("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞")
    plt.savefig("fertilizer_chart.png")
    return "fertilizer_chart.png"

# –§—É–Ω–∫—Ü—ñ—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def send_fertilization_reminders(chat_id, schedule):
    for date, task in schedule.items():
        await bot.send_message(chat_id, f"üìÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {task} –Ω–∞ {date}")

@dp.message(lambda message: message.text in regions)
async def select_region(message: types.Message, state: FSMContext):
    await state.update_data(region=message.text)
    weather_info = get_weather_data(message.text)
    await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ {message.text} –æ–±–ª–∞—Å—Ç—å. –û—Å—Ç–∞–Ω–Ω—ñ –º–µ—Ç–µ–æ–¥–∞–Ω—ñ: {weather_info}")

@dp.message(lambda message: message.text in moisture_zones)
async def calculate_fertilizers(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if not all(key in user_data for key in ["crop", "soil", "previous_crop", "region"]):
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞! –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.")
        return
    
    crop, soil, prev_crop, moisture, region = user_data["crop"], user_data["soil"], user_data["previous_crop"], message.text, user_data["region"]
    weather_info = get_weather_data(region)
    fertilizer_rates = {"N": 120, "P": 60, "K": 90}  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç—É
    total_cost = calculate_fertilizer_cost(fertilizer_rates)
    chart_path = await generate_fertilizer_chart(fertilizer_rates)

    response = f"""
üîç **–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ**:
üåæ –ö—É–ª—å—Ç—É—Ä–∞: {crop}
ü™µ –ü–æ–ø–µ—Ä–µ–¥–Ω–∏–∫: {prev_crop}
üåç –¢–∏–ø “ë—Ä—É–Ω—Ç—É: {soil}
üíß –ó–æ–Ω–∞ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è: {moisture}
üìç –û–±–ª–∞—Å—Ç—å: {region}
‚òÅÔ∏è –û—Å—Ç–∞–Ω–Ω—ñ –º–µ—Ç–µ–æ–¥–∞–Ω—ñ: {weather_info}
üí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ–±—Ä–∏–≤: {total_cost} $/–≥–∞
"""
    await message.answer(response)
    await bot.send_photo(message.chat.id, photo=open(chart_path, 'rb'))

if __name__ == "__main__":
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
