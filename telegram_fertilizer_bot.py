import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –õ—ñ—á–∏–ª—å–Ω–∏–∫ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
user_data = {}

# –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç
BOT_INFO_URL = "https://sites.google.com/view/agronom-bot/"

# –û—Å–Ω–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üü¢ –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É"),
    KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")
)

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ –∫—É–ª—å—Ç—É—Ä
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –∫—É–ª—å—Ç—É—Ä
def create_crop_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for crop in crops:
        keyboard.add(KeyboardButton(crop))
    return keyboard

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ—Å–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
def create_post_calc_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîÑ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫—É–ª—å—Ç—É—Ä—É"))
    keyboard.add(KeyboardButton("üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—à—ñ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤"))
    return keyboard

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_data[message.from_user.id] = {"free_used": False}
    await message.answer("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=create_crop_keyboard())

@dp.message_handler(lambda message: message.text in crops)
async def calculate_fertilizer(message: types.Message):
    user_id = message.from_user.id

    if user_id in user_data and user_data[user_id]["free_used"]:
        keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É (10$)", callback_data="pay"))
        await message.answer("–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å–ø–ª–∞—Ç–∏—Ç–∏ 10$.", reply_markup=keyboard)
        return
    else:
        user_data[user_id]["free_used"] = True

    crop = message.text
    # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–æ–±—Ä–∏–≤
    recommendation = {
        "NPK": "10-26-26",
        "Sulfur": "5-10 –∫–≥",
        "Nitrogen": "50-100 –∫–≥",
        "Cost_per_ha": "120$"
    }
    
    response = (
        f"‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è {crop}**\n\n"
        f"üîπ **–ú–∞—Ä–∫–∞ –¥–æ–±—Ä–∏–≤:** {recommendation['NPK']}\n"
        f"üîπ **–°—ñ—Ä–∫–∞:** {recommendation['Sulfur']}\n"
        f"üîπ **–ê–∑–æ—Ç:** {recommendation['Nitrogen']}\n"
        f"üí∞ **–°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞ 1 –≥–∞:** {recommendation['Cost_per_ha']}\n"
    )

    await message.answer(response, parse_mode="Markdown", reply_markup=create_post_calc_keyboard())

@dp.callback_query_handler(lambda call: call.data == "pay")
async def process_payment(call: types.CallbackQuery):
    await call.message.answer("‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫—É–ª—å—Ç—É—Ä—É.", reply_markup=create_crop_keyboard())

@dp.message_handler(lambda message: message.text == "üîÑ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫—É–ª—å—Ç—É—Ä—É")
async def restart_calculation(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=create_crop_keyboard())

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")
async def bot_info(message: types.Message):
    await message.answer(f"‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—É—Ç: {BOT_INFO_URL}")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
