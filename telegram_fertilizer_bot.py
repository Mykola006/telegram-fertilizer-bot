import asyncio
import os
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –∑ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º `parse_mode`
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∏–±–æ—Ä—É
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—ñ—Ä–æ–∑–µ–º", "–ü—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–°—É–ø—ñ—â–∞–Ω–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–¢–µ—Ö–Ω—ñ—á–Ω—ñ", "–û–≤–æ—á—ñ", "–ß–∏—Å—Ç–∏–π –ø–∞—Ä"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def create_keyboard(options):
    keyboard = [[KeyboardButton(text=option)] for option in options]  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=create_keyboard(crops))

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–±–æ—Ä—É
@dp.message()
async def handle_message(message: Message):
    text = message.text
    if text in crops:
        await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏: {text}. –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:", reply_markup=create_keyboard(soil_types))
    elif text in soil_types:
        await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏: {text}. –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫:", reply_markup=create_keyboard(previous_crops))
    elif text in previous_crops:
        await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏: {text}. –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è:", reply_markup=create_keyboard(moisture_zones))
    elif text in moisture_zones:
        await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è: {text}. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–æ–±—Ä–∏–≤–∞...")

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤
        recommendation = {
            "NPK": "10-26-26",
            "Sulfur": "5-10 –∫–≥",
            "Nitrogen": "50-100 –∫–≥",
            "Cost_per_ha": "120$"
        }
        response = (
            f"‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –º–∞—Ä–∫–∞ –¥–æ–±—Ä–∏–≤:</b> {recommendation['NPK']}\n"
            f"üåø <b>–°—ñ—Ä–∫–∞:</b> {recommendation['Sulfur']}\n"
            f"üå± <b>–ê–∑–æ—Ç:</b> {recommendation['Nitrogen']}\n"
            f"üí∞ <b>–°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞ 1 –≥–∞:</b> {recommendation['Cost_per_ha']}"
        )
        await message.answer(response, parse_mode="HTML")

# –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
