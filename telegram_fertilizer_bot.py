import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram import F, Router
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ –∫—É–ª—å—Ç—É—Ä
crops = ["–ö—É–∫—É—Ä—É–¥–∑–∞", "–ü—à–µ–Ω–∏—Ü—è", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—ñ—Ä–æ–∑–µ–º", "–ü—ñ–¥–∑–æ–ª–∏—Å—Ç–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–°—É–ø—ñ—â–∞–Ω–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–¢–µ—Ö–Ω—ñ—á–Ω—ñ", "–û–≤–æ—á—ñ", "–ß–∏—Å—Ç–∏–π –ø–∞—Ä"]

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")],
    [KeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")]
], resize_keyboard=True)

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=main_keyboard)

@dp.message(F.text == "üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")
async def choose_crop(message: Message):
    keyboard = ReplyKeyboardBuilder()
    for crop in crops:
        keyboard.add(KeyboardButton(text=crop))
    keyboard.adjust(2)
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=keyboard.as_markup(resize_keyboard=True))

@dp.message(F.text.in_(crops))
async def choose_soil(message: Message, state: FSMContext):
    await state.update_data(crop=message.text)
    keyboard = ReplyKeyboardBuilder()
    for soil in soil_types:
        keyboard.add(KeyboardButton(text=soil))
    keyboard.adjust(2)
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:", reply_markup=keyboard.as_markup(resize_keyboard=True))

@dp.message(F.text.in_(soil_types))
async def choose_previous_crop(message: Message, state: FSMContext):
    await state.update_data(soil=message.text)
    keyboard = ReplyKeyboardBuilder()
    for prev in previous_crops:
        keyboard.add(KeyboardButton(text=prev))
    keyboard.adjust(2)
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫:", reply_markup=keyboard.as_markup(resize_keyboard=True))

@dp.message(F.text.in_(previous_crops))
async def calculate_fertilizer(message: Message, state: FSMContext):
    data = await state.get_data()
    crop = data["crop"]
    soil = data["soil"]
    previous_crop = message.text
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–æ—Ä–º–∏ –¥–æ–±—Ä–∏–≤
    fertilizers = {
        "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ": "NPK 10-26-26",
        "–ê–∑–æ—Ç–Ω—ñ": "–ö–∞—Ä–±–∞–º—ñ–¥ 46%",
        "–°—ñ—Ä—á–∞–Ω—ñ": "–°—É–ª—å—Ñ–∞—Ç –∞–º–æ–Ω—ñ—é 21%"
    }
    
    recommendation = f"\n‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è {crop}</b>\n\n"
    recommendation += f"üå± –ü–æ–ø–µ—Ä–µ–¥–Ω–∏–∫: {previous_crop}\nüß™ “ê—Ä—É–Ω—Ç: {soil}\n\n"
    recommendation += f"üîπ –ö–æ–º–ø–ª–µ–∫—Å–Ω–µ –¥–æ–±—Ä–∏–≤–æ: {fertilizers['–ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ']} (200 –∫–≥/–≥–∞)\n"
    recommendation += f"üîπ –ê–∑–æ—Ç–Ω–µ –¥–æ–±—Ä–∏–≤–æ: {fertilizers['–ê–∑–æ—Ç–Ω—ñ']} (150 –∫–≥/–≥–∞)\n"
    recommendation += f"üîπ –°—ñ—Ä—á–∞–Ω–µ –¥–æ–±—Ä–∏–≤–æ: {fertilizers['–°—ñ—Ä—á–∞–Ω—ñ']} (100 –∫–≥/–≥–∞)\n\n"
    recommendation += "üí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: 120$/–≥–∞"
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üåæ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫—É–ª—å—Ç—É—Ä—É"), KeyboardButton(text="üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏")],
        [KeyboardButton(text="üí∞ –ü—Ä–∏–¥–±–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫")]
    ], resize_keyboard=True)
    
    await message.answer(recommendation, reply_markup=keyboard)

@dp.message(F.text == "üí∞ –ü—Ä–∏–¥–±–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫")
async def buy_premium(message: Message):
    await message.answer("üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∏ —â–æ —É–º–æ–≤–Ω–∞. –ü—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ LiqPay –¥–æ–¥–∞–º–æ —Å–ø—Ä–∞–≤–∂–Ω—é –æ–ø–ª–∞—Ç—É.")

@dp.message(F.text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")
async def bot_info(message: Message):
    await message.answer("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞: https://sites.google.com/view/agronom-bot/")

@dp.message(F.text == "üåæ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫—É–ª—å—Ç—É—Ä—É")
async def restart(message: Message):
    await choose_crop(message)

if __name__ == "__main__":
    import asyncio
    from aiogram import executor
    
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
