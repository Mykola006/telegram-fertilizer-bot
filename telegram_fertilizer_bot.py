import os
import logging
import requests
import numpy as np
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiohttp import web

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/{TOKEN}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
app = web.Application()

# –°–ø–∏—Å–æ–∫ –∫—É–ª—å—Ç—É—Ä, —Ç–∏–ø—ñ–≤ “ë—Ä—É–Ω—Ç—É, –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤, –æ–±–ª–∞—Å—Ç–µ–π
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—É–ø—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–ü—ñ–¥–∑–æ–ª–∏—Å—Ç–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–û–ª—ñ–π–Ω—ñ"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]
regions = ["–ö–∏—ó–≤—Å—å–∫–∞", "–õ—å–≤—ñ–≤—Å—å–∫–∞", "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", "–û–¥–µ—Å—å–∫–∞", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", "–ß–µ—Ä–∫–∞—Å—å–∫–∞"]

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ –¥–æ–±—Ä–∏–≤–∞—Ö
fertilizer_db = {
    "–ü—à–µ–Ω–∏—Ü—è": {"N": 120, "P": 60, "K": 90, "S": 10, "Zn": 0.5, "pH": 6.2},
    "–ö—É–∫—É—Ä—É–¥–∑–∞": {"N": 150, "P": 80, "K": 100, "S": 15, "Zn": 1.0, "pH": 6.5},
    "–°–æ–Ω—è—à–Ω–∏–∫": {"N": 90, "P": 50, "K": 70, "S": 20, "B": 0.8, "pH": 6.3},
    "–†—ñ–ø–∞–∫": {"N": 180, "P": 90, "K": 110, "S": 25, "B": 1.0, "pH": 6.5},
    "–Ø—á–º—ñ–Ω—å": {"N": 110, "P": 55, "K": 80, "S": 12, "Cu": 0.3, "pH": 6.1},
    "–°–æ—è": {"N": 50, "P": 40, "K": 60, "S": 8, "pH": 6.8}
}

price_per_kg = {"N": 0.8, "P": 1.2, "K": 1.0, "S": 0.5, "Zn": 10, "B": 15, "Cu": 8}  # –¶—ñ–Ω–∏ –Ω–∞ –¥–æ–±—Ä–∏–≤–∞

# –§—É–Ω–∫—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ—ó –º–æ–¥–µ–ª—ñ
def adjust_for_soil_ph(soil_ph, target_ph=6.5):
    if soil_ph < target_ph:
        return f"–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–Ω–µ—Å–µ–Ω–Ω—è –≤–∞–ø–Ω–∞: {round((target_ph - soil_ph) * 2, 1)} —Ç/–≥–∞"
    return "pH “ë—Ä—É–Ω—Ç—É –≤ –Ω–æ—Ä–º—ñ, –≤–∞–ø–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ."


def calculate_fertilizer_cost(fertilizer_rates):
    return sum(fertilizer_rates[element] * price_per_kg[element] for element in fertilizer_rates)


def generate_fertilizer_chart(fertilizer_rates):
    elements = list(fertilizer_rates.keys())
    values = list(fertilizer_rates.values())
    plt.figure(figsize=(6, 4))
    plt.bar(elements, values, color=['blue', 'green', 'red', 'yellow', 'purple'])
    plt.xlabel("–ï–ª–µ–º–µ–Ω—Ç–∏")
    plt.ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å (–∫–≥/–≥–∞)")
    plt.title("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞")
    plt.savefig("fertilizer_chart.png")
    return "fertilizer_chart.png"

@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É"))
    keyboard.add(KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"))
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=keyboard)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
