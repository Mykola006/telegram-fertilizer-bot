import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram import F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∏–±–æ—Ä—É
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—ñ—Ä–æ–∑–µ–º", "–ü—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–°—É–ø—ñ—â–∞–Ω–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–¢–µ—Ö–Ω—ñ—á–Ω—ñ", "–û–≤–æ—á—ñ", "–ß–∏—Å—Ç–∏–π –ø–∞—Ä"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")],
    [KeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")]
], resize_keyboard=True)

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def create_keyboard(options):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=option)] for option in options],
        resize_keyboard=True
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è.\n–û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=main_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"
@dp.message(F.text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")
async def send_info(message: Message):
    await message.answer("‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –±–æ—Ç–∞: [–°–∞–π—Ç](https://sites.google.com/view/agronom-bot/)", parse_mode="Markdown")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏
@dp.message(F.text == "üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")
async def select_crop(message: Message, state: FSMContext):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=create_keyboard(crops))

@dp.message(F.text.in_(crops))
async def select_soil(message: Message, state: FSMContext):
    await state.update_data(crop=message.text)
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:", reply_markup=create_keyboard(soil_types))

@dp.message(F.text.in_(soil_types))
async def select_previous_crop(message: Message, state: FSMContext):
    await state.update_data(soil=message.text)
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫:", reply_markup=create_keyboard(previous_crops))

@dp.message(F.text.in_(previous_crops))
async def select_moisture_zone(message: Message, state: FSMContext):
    await state.update_data(previous_crop=message.text)
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è:", reply_markup=create_keyboard(moisture_zones))

@dp.message(F.text.in_(moisture_zones))
async def calculate_fertilizer(message: Message, state: FSMContext):
    user_data = await state.get_data()
    crop = user_data.get("crop")
    soil = user_data.get("soil")
    previous_crop = user_data.get("previous_crop")
    moisture = message.text

    # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ
    recommendations = {
        "–ö—É–∫—É—Ä—É–¥–∑–∞": {"NPK": ("10-26-26", 200, 80), "–ê–∑–æ—Ç": ("–ö–ê–° 32", 100, 50), "–°—ñ—Ä–∫–∞": ("–°—É–ª—å—Ñ–∞—Ç –∞–º–æ–Ω—ñ—é", 50, 30), "–í—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å": "10 —Ç/–≥–∞"},
        "–ü—à–µ–Ω–∏—Ü—è": {"NPK": ("16-16-16", 150, 70), "–ê–∑–æ—Ç": ("–°–µ–ª—ñ—Ç—Ä–∞ –∞–º—ñ–∞—á–Ω–∞", 90, 45), "–°—ñ—Ä–∫–∞": ("–ì—ñ–ø—Å", 30, 20), "–í—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å": "7 —Ç/–≥–∞"},
        "–°–æ–Ω—è—à–Ω–∏–∫": {"NPK": ("8-20-30", 180, 85), "–ê–∑–æ—Ç": ("–ö–∞—Ä–±–∞–º—ñ–¥", 70, 40), "–°—ñ—Ä–∫–∞": ("–°—É–ª—å—Ñ–∞—Ç –∫–∞–ª—ñ—é", 40, 25), "–í—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å": "4 —Ç/–≥–∞"}
    }

    recommendation = recommendations.get(crop, {})
    
    response = f"üåø <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è {crop}</b>\n"
    response += f"üü¢ –ü–æ–ø–µ—Ä–µ–¥–Ω–∏–∫: {previous_crop}\n"
    response += f"üå± “ê—Ä—É–Ω—Ç: {soil}\n"
    response += f"üíß –ó–æ–Ω–∞ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è: {moisture}\n"
    response += f"üåæ –ü–ª–∞–Ω–æ–≤–∞ –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å: {recommendation.get('–í—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å', '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ')}\n\n"
    
    response += f"‚öóÔ∏è <b>–ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ –¥–æ–±—Ä–∏–≤–∞:</b>\n"
    response += f"üîπ {recommendation['NPK'][0]} - {recommendation['NPK'][1]} –∫–≥/–≥–∞ (~{recommendation['NPK'][2]}$/–≥–∞)\n\n"
    
    response += f"‚öóÔ∏è <b>–ê–∑–æ—Ç–Ω—ñ –¥–æ–±—Ä–∏–≤–∞:</b>\n"
    response += f"üîπ {recommendation['–ê–∑–æ—Ç'][0]} - {recommendation['–ê–∑–æ—Ç'][1]} –∫–≥/–≥–∞ (~{recommendation['–ê–∑–æ—Ç'][2]}$/–≥–∞)\n\n"
    
    response += f"‚öóÔ∏è <b>–°—ñ—Ä—á–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞:</b>\n"
    response += f"üîπ {recommendation['–°—ñ—Ä–∫–∞'][0]} - {recommendation['–°—ñ—Ä–∫–∞'][1]} –∫–≥/–≥–∞ (~{recommendation['–°—ñ—Ä–∫–∞'][2]}$/–≥–∞)\n\n"

    buttons = [
        [InlineKeyboardButton(text="üîÑ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫—É–ª—å—Ç—É—Ä—É", callback_data="restart")],
        [InlineKeyboardButton(text="üåø –ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤", callback_data="change_fertilizer")],
        [InlineKeyboardButton(text="üí≥ –ü—Ä–∏–¥–±–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ ($10)", callback_data="buy_premium")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(response, reply_markup=keyboard)

@dp.callback_query(F.data == "restart")
async def restart_process(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.answer("üîÑ –ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É! –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=create_keyboard(crops))

@dp.callback_query(F.data == "buy_premium")
async def buy_premium(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üí≥ –û–ø–ª–∞—Ç–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –ø–∏—à—ñ—Ç—å: simoxa@ukr.net")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
