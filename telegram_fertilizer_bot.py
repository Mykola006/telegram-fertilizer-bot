import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.i18n import gettext as _
from aiogram import F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∏–±–æ—Ä—É
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—ñ—Ä–æ–∑–µ–º", "–ü—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–°—É–ø—ñ—â–∞–Ω–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–¢–µ—Ö–Ω—ñ—á–Ω—ñ", "–û–≤–æ—á—ñ", "–ß–∏—Å—Ç–∏–π –ø–∞—Ä"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")],
    [KeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")]
], resize_keyboard=True)

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def create_keyboard(options):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=option)] for option in options],
        resize_keyboard=True
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è.\n–û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=main_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"
@dp.message(F.text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")
async def send_info(message: Message):
    await message.answer("‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –±–æ—Ç–∞: [–°–∞–π—Ç](https://sites.google.com/view/agronom-bot/)", parse_mode="Markdown")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏
@dp.message(F.text == "üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")
async def select_crop(message: Message, state: FSMContext):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=create_keyboard(crops))

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏
@dp.message(F.text.in_(crops))
async def select_soil(message: Message, state: FSMContext):
    await state.update_data(crop=message.text)
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:", reply_markup=create_keyboard(soil_types))

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É “ë—Ä—É–Ω—Ç—É
@dp.message(F.text.in_(soil_types))
async def select_previous_crop(message: Message, state: FSMContext):
    await state.update_data(soil=message.text)
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫:", reply_markup=create_keyboard(previous_crops))

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∞
@dp.message(F.text.in_(previous_crops))
async def select_moisture_zone(message: Message, state: FSMContext):
    await state.update_data(previous_crop=message.text)
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è:", reply_markup=create_keyboard(moisture_zones))

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∑–æ–Ω–∏ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è
@dp.message(F.text.in_(moisture_zones))
async def calculate_fertilizer(message: Message, state: FSMContext):
    user_data = await state.get_data()
    crop = user_data.get("crop")
    soil = user_data.get("soil")
    previous_crop = user_data.get("previous_crop")
    moisture = message.text

    # –õ–æ–≥—ñ–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–æ–±—Ä–∏–≤
    recommendations = {
        "–ö—É–∫—É—Ä—É–¥–∑–∞": {"NPK": "10-26-26", "–ê–∑–æ—Ç": "120-150 –∫–≥", "–§–æ—Å—Ñ–æ—Ä": "50 –∫–≥", "–ö–∞–ª—ñ–π": "40 –∫–≥"},
        "–ü—à–µ–Ω–∏—Ü—è": {"NPK": "16-16-16", "–ê–∑–æ—Ç": "100-120 –∫–≥", "–§–æ—Å—Ñ–æ—Ä": "40 –∫–≥", "–ö–∞–ª—ñ–π": "30 –∫–≥"},
        "–°–æ–Ω—è—à–Ω–∏–∫": {"NPK": "8-20-30", "–ê–∑–æ—Ç": "80-100 –∫–≥", "–§–æ—Å—Ñ–æ—Ä": "40 –∫–≥", "–ö–∞–ª—ñ–π": "40 –∫–≥"}
    }

    recommendation = recommendations.get(crop, {})
    response = f"üåø <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è {crop}</b>\n"
    response += f"üü¢ –ü–æ–ø–µ—Ä–µ–¥–Ω–∏–∫: {previous_crop}\n"
    response += f"üå± “ê—Ä—É–Ω—Ç: {soil}\n"
    response += f"üíß –ó–æ–Ω–∞ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è: {moisture}\n"
    response += f"‚öóÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞:</b>\n"
    response += f"üîπ –ú–∞—Ä–∫–∞: {recommendation.get('NPK', '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ')}\n"
    response += f"üß™ –ê–∑–æ—Ç: {recommendation.get('–ê–∑–æ—Ç', '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ')}\n"
    response += f"üß™ –§–æ—Å—Ñ–æ—Ä: {recommendation.get('–§–æ—Å—Ñ–æ—Ä', '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ')}\n"
    response += f"üß™ –ö–∞–ª—ñ–π: {recommendation.get('–ö–∞–ª—ñ–π', '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ')}\n"

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton(text="üîÑ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫—É–ª—å—Ç—É—Ä—É", callback_data="restart")],
        [InlineKeyboardButton(text="üîç –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—ñ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤", callback_data="change_fertilizer")],
        [InlineKeyboardButton(text="üí≥ –ü—Ä–∏–¥–±–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ ($10)", callback_data="buy_premium")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(response, reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫—É–ª—å—Ç—É—Ä—É"
@dp.callback_query(F.data == "restart")
async def restart_process(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.answer("üîÑ –ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É! –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=create_keyboard(crops))

# –û–±—Ä–æ–±–Ω–∏–∫ –æ–ø–ª–∞—Ç–∏ (—É–º–æ–≤–Ω–∏–π)
@dp.callback_query(F.data == "buy_premium")
async def buy_premium(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üí≥ –û–ø–ª–∞—Ç–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –ø–∏—à—ñ—Ç—å: simoxa@ukr.net")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
