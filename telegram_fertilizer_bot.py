import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import logging
from aiohttp import web

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/{TOKEN}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
main_keyboard.add(KeyboardButton("\U0001F331 –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É"))
main_keyboard.add(KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"))

# –°–ø–∏—Å–æ–∫ –∫—É–ª—å—Ç—É—Ä, —Ç–∏–ø—ñ–≤ “ë—Ä—É–Ω—Ç—É, –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—É–ø—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–ü—ñ–¥–∑–æ–ª–∏—Å—Ç–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–û–ª—ñ–π–Ω—ñ"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –º–æ–¥–µ–ª—ñ
fertilizer_data = {
    "–ü—à–µ–Ω–∏—Ü—è": {"N": 120, "P": 60, "K": 90, "yield_factor": 1.1},
    "–ö—É–∫—É—Ä—É–¥–∑–∞": {"N": 150, "P": 80, "K": 100, "yield_factor": 1.2},
    "–°–æ–Ω—è—à–Ω–∏–∫": {"N": 90, "P": 50, "K": 70, "yield_factor": 1.0},
}

soil_adjustments = {
    "–ß–æ—Ä–Ω–æ–∑–µ–º": {"N": 1.0, "P": 1.0, "K": 1.0},
    "–°—É–ø—ñ—â–∞–Ω–∏–π": {"N": 1.2, "P": 1.1, "K": 1.2},
    "–ì–ª–∏–Ω–∏—Å—Ç–∏–π": {"N": 0.9, "P": 1.0, "K": 0.9},
}

prev_crop_adjustments = {
    "–ó–µ—Ä–Ω–æ–≤—ñ": {"N": 1.1, "P": 1.0, "K": 1.0},
    "–ë–æ–±–æ–≤—ñ": {"N": 0.8, "P": 1.1, "K": 1.1},
    "–û–ª—ñ–π–Ω—ñ": {"N": 1.0, "P": 1.0, "K": 1.0},
}

moisture_adjustments = {
    "–ù–∏–∑—å–∫–∞": {"N": 0.9, "P": 1.0, "K": 1.0},
    "–°–µ—Ä–µ–¥–Ω—è": {"N": 1.0, "P": 1.0, "K": 1.0},
    "–î–æ—Å—Ç–∞—Ç–Ω—è": {"N": 1.1, "P": 1.1, "K": 1.1},
}

def calculate_fertilizer(crop, soil, prev_crop, moisture):
    if crop in fertilizer_data:
        base = fertilizer_data[crop]
        n = base["N"] * soil_adjustments[soil]["N"] * prev_crop_adjustments[prev_crop]["N"] * moisture_adjustments[moisture]["N"]
        p = base["P"] * soil_adjustments[soil]["P"] * prev_crop_adjustments[prev_crop]["P"] * moisture_adjustments[moisture]["P"]
        k = base["K"] * soil_adjustments[soil]["K"] * prev_crop_adjustments[prev_crop]["K"] * moisture_adjustments[moisture]["K"]
        return {"N": round(n), "P": round(p), "K": round(k)}
    return None

@dp.message(lambda message: message.text in moisture_zones)
async def calculate_fertilizers(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if not all(key in user_data for key in ["crop", "soil", "previous_crop"]):
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞! –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.", reply_markup=main_keyboard)
        return
    
    crop, soil, prev_crop, moisture = user_data["crop"], user_data["soil"], user_data["previous_crop"], message.text
    fert = calculate_fertilizer(crop, soil, prev_crop, moisture)
    if not fert:
        await message.answer("‚ö†Ô∏è –î–∞–Ω—ñ –¥–ª—è —Ü—ñ—î—ó –∫—É–ª—å—Ç—É—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        return
    
    response = (f"üîç **–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ**:
"
                f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {crop}\n"
                f"ü™µ –ü–æ–ø–µ—Ä–µ–¥–Ω–∏–∫: {prev_crop}\n"
                f"üåç –¢–∏–ø “ë—Ä—É–Ω—Ç—É: {soil}\n"
                f"üíß –ó–æ–Ω–∞ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è: {moisture}\n\n"
                f"üìä **–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞ (–∫–≥/–≥–∞)**:\n"
                f"‚úî –ê–∑–æ—Ç (N): {fert['N']} –∫–≥\n"
                f"‚úî –§–æ—Å—Ñ–æ—Ä (P): {fert['P']} –∫–≥\n"
                f"‚úî –ö–∞–ª—ñ–π (K): {fert['K']} –∫–≥")
    
    keyboard = ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
    keyboard.add(KeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤"))
    keyboard.add(KeyboardButton("\U0001F331 –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫—É–ª—å—Ç—É—Ä—É"))
    await message.answer(response, reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è webhook
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)

async def on_shutdown():
    await bot.delete_webhook()

async def handle_update(request):
    update = types.Update(**await request.json())
    await dp.feed_update(bot, update)
    return web.Response()

app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_update)

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
