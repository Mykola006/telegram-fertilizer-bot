import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import logging

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton("\U0001F331 –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É"))
main_keyboard.add(KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"))

# –°–ø–∏—Å–æ–∫ –∫—É–ª—å—Ç—É—Ä, —Ç–∏–ø—ñ–≤ “ë—Ä—É–Ω—Ç—É, –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—É–ø—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–ü—ñ–¥–∑–æ–ª–∏—Å—Ç–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–û–ª—ñ–π–Ω—ñ"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏
payment_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ 10$", url="https://www.liqpay.ua/")]
    ]
)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("\U0001F44B –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=main_keyboard)

# –í–∏–±—ñ—Ä –∫—É–ª—å—Ç—É—Ä–∏
@dp.message(lambda message: message.text == "\U0001F331 –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")
async def select_crop(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for crop in crops:
        keyboard.add(KeyboardButton(crop))
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=keyboard)

# –í–∏–±—ñ—Ä —Ç–∏–ø—É “ë—Ä—É–Ω—Ç—É
@dp.message(lambda message: message.text in crops)
async def select_soil(message: types.Message, state: FSMContext):
    await state.update_data(crop=message.text)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for soil in soil_types:
        keyboard.add(KeyboardButton(soil))
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:", reply_markup=keyboard)

# –í–∏–±—ñ—Ä –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∞
@dp.message(lambda message: message.text in soil_types)
async def select_previous_crop(message: types.Message, state: FSMContext):
    await state.update_data(soil=message.text)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for prev_crop in previous_crops:
        keyboard.add(KeyboardButton(prev_crop))
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫:", reply_markup=keyboard)

# –í–∏–±—ñ—Ä –∑–æ–Ω–∏ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è
@dp.message(lambda message: message.text in previous_crops)
async def select_moisture_zone(message: types.Message, state: FSMContext):
    await state.update_data(previous_crop=message.text)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for zone in moisture_zones:
        keyboard.add(KeyboardButton(zone))
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è:", reply_markup=keyboard)

# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤
@dp.message(lambda message: message.text in moisture_zones)
async def calculate_fertilizers(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    crop, soil, prev_crop, moisture = user_data.values()
    
    # –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –º–æ–¥–µ–ª—å (—Å–ø—Ä–æ—â–µ–Ω–æ)
    recommended_fertilizers = {
        "–ö–æ–º–ø–ª–µ–∫—Å–Ω–µ": {"–ú–∞—Ä–∫–∞": "NPK 10-26-26", "–ù–æ—Ä–º–∞": "200 –∫–≥/–≥–∞", "–¶—ñ–Ω–∞": "$50/–≥–∞"},
        "–ê–∑–æ—Ç–Ω–µ": {"–ú–∞—Ä–∫–∞": "–ö–ê–°-32", "–ù–æ—Ä–º–∞": "100 –∫–≥/–≥–∞", "–¶—ñ–Ω–∞": "$30/–≥–∞"},
        "–°—ñ—Ä—á–∞–Ω–µ": {"–ú–∞—Ä–∫–∞": "–°—É–ª—å—Ñ–∞—Ç –∞–º–æ–Ω—ñ—é", "–ù–æ—Ä–º–∞": "50 –∫–≥/–≥–∞", "–¶—ñ–Ω–∞": "$15/–≥–∞"},
    }

    response = (f"\U0001F50D –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ:\n"
                f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {crop}\n"
                f"ü™µ –ü–æ–ø–µ—Ä–µ–¥–Ω–∏–∫: {prev_crop}\n"
                f"üåç –¢–∏–ø “ë—Ä—É–Ω—Ç—É: {soil}\n"
                f"üíß –ó–æ–Ω–∞ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è: {moisture}\n\n"
                f"üìä –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞:\n"
                f"‚úî {recommended_fertilizers['–ö–æ–º–ø–ª–µ–∫—Å–Ω–µ']['–ú–∞—Ä–∫–∞']} ‚Äî {recommended_fertilizers['–ö–æ–º–ø–ª–µ–∫—Å–Ω–µ']['–ù–æ—Ä–º–∞']} ‚Äî {recommended_fertilizers['–ö–æ–º–ø–ª–µ–∫—Å–Ω–µ']['–¶—ñ–Ω–∞']}\n"
                f"‚úî {recommended_fertilizers['–ê–∑–æ—Ç–Ω–µ']['–ú–∞—Ä–∫–∞']} ‚Äî {recommended_fertilizers['–ê–∑–æ—Ç–Ω–µ']['–ù–æ—Ä–º–∞']} ‚Äî {recommended_fertilizers['–ê–∑–æ—Ç–Ω–µ']['–¶—ñ–Ω–∞']}\n"
                f"‚úî {recommended_fertilizers['–°—ñ—Ä—á–∞–Ω–µ']['–ú–∞—Ä–∫–∞']} ‚Äî {recommended_fertilizers['–°—ñ—Ä—á–∞–Ω–µ']['–ù–æ—Ä–º–∞']} ‚Äî {recommended_fertilizers['–°—ñ—Ä—á–∞–Ω–µ']['–¶—ñ–Ω–∞']}")
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤"))
    keyboard.add(KeyboardButton("\U0001F331 –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫—É–ª—å—Ç—É—Ä—É"))
    await message.answer(response, reply_markup=keyboard)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —ñ–Ω—à–∏—Ö –º–∞—Ä–æ–∫
@dp.message(lambda message: message.text == "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤")
async def change_fertilizers(message: types.Message):
    await message.answer("\U0001F50D –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—ñ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤:", reply_markup=payment_keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
