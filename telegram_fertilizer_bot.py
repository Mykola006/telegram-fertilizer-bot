import asyncio
from aiogram import Bot, Dispatcher, types
import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, LabeledPrice, PreCheckoutQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types.input_file import InputFile
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏
usage_count = {}
payment_count = {}

# –ö–ª–∞—Å–∏ —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
class FertilizerCalculation(StatesGroup):
    crop = State()
    prev_crop = State()
    moisture = State()
    yield_goal = State()
    soil_type = State()
    ph = State()
    area = State()

# –°–ø–∏—Å–∫–∏ –º–æ–∂–ª–∏–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—ñ—Ä–æ–∑–µ–º", "–ü—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–°—É–ø—ñ—â–∞–Ω–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–¢–µ—Ö–Ω—ñ—á–Ω—ñ", "–û–≤–æ—á—ñ", "–ß–∏—Å—Ç–∏–π –ø–∞—Ä"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def create_keyboard(options, add_back=False, add_skip=False):
    keyboard = [[KeyboardButton(text=option)] for option in options]
    if add_back:
        keyboard.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    if add_skip:
        keyboard.append([KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–æ–±—Ä–∏–≤ (–±–∞–∑–æ–≤–∏–π –ø—Ä–∏–∫–ª–∞–¥)
async def calculate_fertilizer(crop, yield_goal, area, soil_type):
    nutrient_requirements = {
        "–ø—à–µ–Ω–∏—Ü—è": {"N": 25, "P": 8, "K": 18},
        "–∫—É–∫—É—Ä—É–¥–∑–∞": {"N": 22, "P": 10, "K": 20},
        "—Å–æ–Ω—è—à–Ω–∏–∫": {"N": 30, "P": 15, "K": 60},
        "—Å–æ—è": {"N": 10, "P": 15, "K": 25},
        "—Ä—ñ–ø–∞–∫": {"N": 45, "P": 12, "K": 35},
        "—è—á–º—ñ–Ω—å": {"N": 20, "P": 8, "K": 18}
    }
    if crop not in nutrient_requirements:
        return "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–∞ –∫—É–ª—å—Ç—É—Ä–∞."
    needs = nutrient_requirements[crop]
    n_fertilizer = needs["N"] * yield_goal * area
    p_fertilizer = needs["P"] * yield_goal * area
    k_fertilizer = needs["K"] * yield_goal * area
    return f"üîπ –î–ª—è {crop} –Ω–∞ –ø–ª–æ—â—ñ {area} –≥–∞ –∑ –º–µ—Ç–æ—é {yield_goal} —Ç/–≥–∞:\n    - –ê–∑–æ—Ç (N): {n_fertilizer} –∫–≥\n    - –§–æ—Å—Ñ–æ—Ä (P): {p_fertilizer} –∫–≥\n    - –ö–∞–ª—ñ–π (K): {k_fertilizer} –∫–≥"

# –§—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è PDF –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é reportlab
async def generate_pdf(data):
    filename = "recommendation.pdf"
    c = canvas.Canvas(filename, pagesize=letter)
    c.drawString(100, 750, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –∂–∏–≤–ª–µ–Ω–Ω—é")
    c.drawString(100, 730, data)
    c.save()
    return filename

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤", callback_data="calc_fertilizer")],
        [InlineKeyboardButton(text="üå± –î–æ–≤—ñ–¥–Ω–∏–∫ –∫—É–ª—å—Ç—É—Ä", callback_data="crop_guide")],
        [InlineKeyboardButton(text="üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ PDF", callback_data="get_pdf")]
    ])
    await message.answer("–í—ñ—Ç–∞—é! –Ø –±–æ—Ç-–∞–≥—Ä–æ–Ω–æ–º. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–æ–±—Ä–∏–≤ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –æ–ø–ª–∞—Ç–∏
@dp.callback_query(lambda c: c.data == "calc_fertilizer")
async def ask_crop(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –æ–ø–ª–∞—Ç–∞
    if usage_count.get(user_id, 0) >= 1 + payment_count.get(user_id, 0):
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É $10
        prices = [LabeledPrice(label="–î–æ–¥–∞—Ç–∫–æ–≤–∞ –∫—É–ª—å—Ç—É—Ä–∞", amount=1000)]
        await callback_query.answer()  # –∑–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–±—ñ—Ä
        await bot.send_invoice(chat_id=user_id,
                               title="–û–ø–ª–∞—Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É",
                               description="–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –∫—É–ª—å—Ç—É—Ä–∏",
                               provider_token=PROVIDER_TOKEN,
                               currency="USD",
                               prices=prices,
                               payload="calc_payment")
        return
    # –Ø–∫—â–æ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞, –ø–æ—á–∏–Ω–∞—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
    await state.set_state(FertilizerCalculation.crop)
    crop_keyboard = create_keyboard(crops)
    await callback_query.message.answer("üåæ –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=crop_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏
@dp.message(FertilizerCalculation.crop)
async def ask_prev_crop(message: types.Message, state: FSMContext):
    text = message.text
    if text not in crops:
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.")
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –∫—É–ª—å—Ç—É—Ä–∏
    await state.update_data(crop=text.lower())
    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏
    await state.set_state(FertilizerCalculation.prev_crop)
    prev_crop_kb = create_keyboard(previous_crops, add_back=True)
    await message.answer("‚ôªÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏:", reply_markup=prev_crop_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏
@dp.message(FertilizerCalculation.prev_crop)
async def ask_moisture(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏
        await state.set_state(FertilizerCalculation.crop)
        crop_kb = create_keyboard(crops)
        await message.answer("üåæ –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=crop_kb)
        return
    if text not in previous_crops:
        await message.answer("‚ùó –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫ –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.")
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∫—É–ª—å—Ç—É—Ä—É
    await state.update_data(prev_crop=text)
    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –∑–æ–Ω–∏ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è
    await state.set_state(FertilizerCalculation.moisture)
    moisture_kb = create_keyboard(moisture_zones, add_back=True)
    await message.answer("üíß –û–±–µ—Ä—ñ—Ç—å –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è (–Ω–∏–∑—å–∫–∞, —Å–µ—Ä–µ–¥–Ω—è, –¥–æ—Å—Ç–∞—Ç–Ω—è):", reply_markup=moisture_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∑–æ–Ω–∏ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è
@dp.message(FertilizerCalculation.moisture)
async def ask_yield(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏
        await state.set_state(FertilizerCalculation.prev_crop)
        prev_crop_kb = create_keyboard(previous_crops, add_back=True)
        await message.answer("‚ôªÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏:", reply_markup=prev_crop_kb)
        return
    if text not in moisture_zones:
        await message.answer("‚ùó –û–±–µ—Ä—ñ—Ç—å –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.")
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è
    await state.update_data(moisture=text)
    # –ó–∞–ø–∏—Ç—É—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å
    await state.set_state(FertilizerCalculation.yield_goal)
    yield_kb = create_keyboard([], add_back=True)
    await message.answer("üìä –í–≤–µ–¥—ñ—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω—É –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å (—Ç/–≥–∞):", reply_markup=yield_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ
@dp.message(FertilizerCalculation.yield_goal)
async def ask_soil(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –∑–æ–Ω–∏ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è
        await state.set_state(FertilizerCalculation.moisture)
        moisture_kb = create_keyboard(moisture_zones, add_back=True)
        await message.answer("üíß –û–±–µ—Ä—ñ—Ç—å –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è (–Ω–∏–∑—å–∫–∞, —Å–µ—Ä–µ–¥–Ω—è, –¥–æ—Å—Ç–∞—Ç–Ω—è):", reply_markup=moisture_kb)
        return
    try:
        yield_goal = float(text.replace(',', '.'))
    except ValueError:
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ (–º–æ–∂–Ω–∞ –¥—Ä–æ–±–æ–≤–µ).")
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å
    await state.update_data(yield_goal=yield_goal)
    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É “ë—Ä—É–Ω—Ç—É
    await state.set_state(FertilizerCalculation.soil_type)
    soil_kb = create_keyboard(soil_types, add_back=True)
    await message.answer("üü§ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:", reply_markup=soil_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É “ë—Ä—É–Ω—Ç—É
@dp.message(FertilizerCalculation.soil_type)
async def ask_ph_level(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ
        await state.set_state(FertilizerCalculation.yield_goal)
        yield_kb = create_keyboard([], add_back=True)
        await message.answer("üìä –í–≤–µ–¥—ñ—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω—É –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å (—Ç/–≥–∞):", reply_markup=yield_kb)
        return
    if text not in soil_types:
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø “ë—Ä—É–Ω—Ç—É
    await state.update_data(soil_type=text.lower())
    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è pH “ë—Ä—É–Ω—Ç—É
    await state.set_state(FertilizerCalculation.ph)
    ph_kb = create_keyboard([], add_back=True, add_skip=True)
    await message.answer("üß™ –í–≤–µ–¥—ñ—Ç—å pH “ë—Ä—É–Ω—Ç—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:", reply_markup=ph_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è pH “ë—Ä—É–Ω—Ç—É —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
@dp.message(FertilizerCalculation.ph)
async def show_recommendations(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É “ë—Ä—É–Ω—Ç—É
        await state.set_state(FertilizerCalculation.soil_type)
        soil_kb = create_keyboard(soil_types, add_back=True)
        await message.answer("üü§ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:", reply_markup=soil_kb)
        return
    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        ph_value = None
    else:
        try:
            ph_value = float(text.replace(',', '.'))
        except ValueError:
            await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å pH —è–∫ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 5.5.")
            return
    data = await state.get_data()
    crop = data['crop']
    yield_goal = data['yield_goal']
    prev_crop = data['prev_crop']
    moisture = data['moisture']
    soil_type = data['soil_type']
    # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —É—Å—ñ—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤
    base_requirements = {
        "–ø—à–µ–Ω–∏—Ü—è": {"N": 25, "P": 8, "K": 18},
        "–∫—É–∫—É—Ä—É–¥–∑–∞": {"N": 22, "P": 10, "K": 20},
        "—Å–æ–Ω—è—à–Ω–∏–∫": {"N": 30, "P": 15, "K": 60},
        "—Å–æ—è": {"N": 10, "P": 15, "K": 25},
        "—Ä—ñ–ø–∞–∫": {"N": 45, "P": 12, "K": 35},
        "—è—á–º—ñ–Ω—å": {"N": 20, "P": 8, "K": 18}
    }
    result_text = ""
    if crop not in base_requirements:
        result_text = "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–∞ –∫—É–ª—å—Ç—É—Ä–∞."
    else:
        # –ü–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫
        N_factor = P_factor = K_factor = 1.0
        if prev_crop == "–ë–æ–±–æ–≤—ñ":
            N_factor *= 0.8
        if prev_crop == "–ß–∏—Å—Ç–∏–π –ø–∞—Ä":
            N_factor *= 0.9
        if prev_crop in ["–¢–µ—Ö–Ω—ñ—á–Ω—ñ", "–û–≤–æ—á—ñ"]:
            N_factor *= 1.1
            P_factor *= 1.1
            K_factor *= 1.1
        # –ü–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è
        if moisture == "–ù–∏–∑—å–∫–∞":
            N_factor *= 0.9
            P_factor *= 0.9
            K_factor *= 0.9
        elif moisture == "–î–æ—Å—Ç–∞—Ç–Ω—è":
            N_factor *= 1.1
            P_factor *= 1.1
            K_factor *= 1.1
        # –ü–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ç–∏–ø “ë—Ä—É–Ω—Ç—É
        if soil_type in ["–ø—ñ—â–∞–Ω–∏–π", "—Å—É–ø—ñ—â–∞–Ω–∏–π"]:
            N_factor *= 1.1
            P_factor *= 1.1
            K_factor *= 1.1
        elif soil_type == "—á–æ—Ä–Ω–æ–∑–µ–º":
            N_factor *= 0.9
            P_factor *= 0.9
            K_factor *= 0.9
        elif soil_type in ["–≥–ª–∏–Ω–∏—Å—Ç–∏–π", "—Å—ñ—Ä–æ–∑–µ–º"]:
            N_factor *= 0.95
            P_factor *= 0.95
            K_factor *= 0.95
        # –û—Å—Ç–∞—Ç–æ—á–Ω—ñ –Ω–æ—Ä–º–∏ –Ω–∞ 1 —Ç –≤—Ä–æ–∂–∞—é
        base = base_requirements[crop]
        N_rate = base["N"] * N_factor
        P_rate = base["P"] * P_factor
        K_rate = base["K"] * K_factor
        # –ü–æ—Ç—Ä–µ–±–∞ –Ω–∞ 1 –≥–∞
        N_per_ha = N_rate * yield_goal
        P_per_ha = P_rate * yield_goal
        K_per_ha = K_rate * yield_goal
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        crop_name = crop.capitalize()
        result_text = f"üîπ –î–ª—è –∫—É–ª—å—Ç—É—Ä–∏ {crop_name} –ø—Ä–∏ –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ {yield_goal} —Ç/–≥–∞:\n    - –ê–∑–æ—Ç (N): {N_per_ha:.1f} –∫–≥/–≥–∞\n    - –§–æ—Å—Ñ–æ—Ä (P): {P_per_ha:.1f} –∫–≥/–≥–∞\n    - –ö–∞–ª—ñ–π (K): {K_per_ha:.1f} –∫–≥/–≥–∞\n"
        # –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –≤–∞–ø–Ω—É–≤–∞–Ω–Ω—è
        if ph_value is None:
            result_text += "‚ÑπÔ∏è pH “ë—Ä—É–Ω—Ç—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –≤–∞–ø–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n"
        elif ph_value < 5.0:
            result_text += f"‚ö†Ô∏è “ê—Ä—É–Ω—Ç –∫–∏—Å–ª–∏–π (pH {ph_value}). –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∞–ø–Ω—É–≤–∞–Ω–Ω—è (~2 —Ç/–≥–∞ –≤–∞–ø–Ω–∞).\n"
        elif ph_value < 5.5:
            result_text += f"‚ö†Ô∏è “ê—Ä—É–Ω—Ç –∫–∏—Å–ª–∏–π (pH {ph_value}). –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∞–ø–Ω—É–≤–∞–Ω–Ω—è (~1 —Ç/–≥–∞ –≤–∞–ø–Ω–∞).\n"
        else:
            result_text += "‚úÖ pH “ë—Ä—É–Ω—Ç—É —É –Ω–æ—Ä–º—ñ, –≤–∞–ø–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ.\n"
        # –†–æ–∑–ø–æ–¥—ñ–ª –¥–æ–±—Ä–∏–≤ –ø–æ —Ñ–∞–∑–∞—Ö —Ä–æ—Å—Ç—É
        result_text += "üìà –†–æ–∑–ø–æ–¥—ñ–ª –¥–æ–±—Ä–∏–≤ –ø–æ —Ñ–∞–∑–∞—Ö —Ä–æ—Å—Ç—É:\n"
        distribution = {
            "–ø—à–µ–Ω–∏—Ü—è": {
                "N": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 0.5), ("–≤ —Ñ–∞–∑—ñ –∫—É—â—ñ–Ω–Ω—è", 0.5)],
                "P": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)],
                "K": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)]
            },
            "–∫—É–∫—É—Ä—É–¥–∑–∞": {
                "N": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 0.5), ("—É —Ñ–∞–∑—ñ 6-8 –ª–∏—Å—Ç–∫—ñ–≤", 0.5)],
                "P": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)],
                "K": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)]
            },
            "—Å–æ–Ω—è—à–Ω–∏–∫": {
                "N": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 0.7), ("–Ω–∞ –ø–æ—á–∞—Ç–∫—É –±—É—Ç–æ–Ω—ñ–∑–∞—Ü—ñ—ó", 0.3)],
                "P": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)],
                "K": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)]
            },
            "—Å–æ—è": {
                "N": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 0.5), ("–Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ü–≤—ñ—Ç—ñ–Ω–Ω—è", 0.5)],
                "P": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)],
                "K": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)]
            },
            "—Ä—ñ–ø–∞–∫": {
                "N": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 0.5), ("–Ω–∞ –ø–æ—á–∞—Ç–∫—É –≤–µ—Å–Ω—è–Ω–æ—ó –≤–µ–≥–µ—Ç–∞—Ü—ñ—ó", 0.5)],
                "P": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)],
                "K": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)]
            },
            "—è—á–º—ñ–Ω—å": {
                "N": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 0.5), ("–≤ —Ñ–∞–∑—ñ –∫—É—â—ñ–Ω–Ω—è", 0.5)],
                "P": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)],
                "K": [("–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é", 1.0)]
            }
        }
        if crop in distribution:
            phases = distribution[crop]
            for nutrient, phases_list in phases.items():
                if phases_list:
                    name_ukr = "–ê–∑–æ—Ç" if nutrient == "N" else "–§–æ—Å—Ñ–æ—Ä" if nutrient == "P" else "–ö–∞–ª—ñ–π"
                    portions = []
                    total_per_ha = N_per_ha if nutrient == "N" else P_per_ha if nutrient == "P" else K_per_ha
                    for phase, fraction in phases_list:
                        amount = total_per_ha * fraction
                        portions.append(f"{amount:.1f} –∫–≥ - {phase}")
                    result_text += f"   - {nutrient}: " + "; ".join(portions) + "\n"
    # –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞
    result_text += "üí° –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞ –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —Ü—ñ—î—ó –ø–æ—Ç—Ä–µ–±–∏:\n"
    result_text += "   - –ê–∑–æ—Ç–Ω—ñ: –∞–º—ñ–∞—á–Ω–∞ —Å–µ–ª—ñ—Ç—Ä–∞ (34% N), –∫–∞—Ä–±–∞–º—ñ–¥ (46% N), –ö–ê–°-32.\n"
    result_text += "   - –§–æ—Å—Ñ–æ—Ä–Ω—ñ: –∞–º–æ—Ñ–æ—Å (MAP), –¥—ñ–∞–º–æ–Ω—ñ–π—Ñ–æ—Å—Ñ–∞—Ç (DAP).\n"
    result_text += "   - –ö–∞–ª—ñ–π–Ω—ñ: –∫–∞–ª—ñ–π —Ö–ª–æ—Ä–∏—Å—Ç–∏–π (KCl), –∫–∞–ª—ñ–π —Å—É–ª—å—Ñ–∞—Ç.\n"
    result_text += "   - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ (NPK): –Ω—ñ—Ç—Ä–æ–∞–º–æ—Ñ–æ—Å–∫–∞ (16:16:16), –¥—ñ–∞–º–æ—Ñ–æ—Å–∫–∞ (10:26:26).\n"
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    await message.answer(result_text)
    # –ó–∞–ø–∏—Ç—É—î–º–æ –ø–ª–æ—â—É –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ—Ç—Ä–µ–±–∏
    await state.set_state(FertilizerCalculation.area)
    area_kb = create_keyboard([], add_back=True, add_skip=True)
    await message.answer("üìè –í–≤–µ–¥—ñ—Ç—å –ø–ª–æ—â—É –ø–æ–ª—è (–≥–∞) –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ—Ç—Ä–µ–±–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:", reply_markup=area_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–ª–æ—â—ñ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ—Ç—Ä–µ–±–∏
@dp.message(FertilizerCalculation.area)
async def calculate_total(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è pH
        await state.set_state(FertilizerCalculation.ph)
        ph_kb = create_keyboard([], add_back=True, add_skip=True)
        await message.answer("üß™ –í–≤–µ–¥—ñ—Ç—å pH “ë—Ä—É–Ω—Ç—É:", reply_markup=ph_kb)
        return
    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–µ–∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–ª–æ—â—ñ
        await message.answer("‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ PDF.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üìä –ù–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫', callback_data='calc_fertilizer')],[InlineKeyboardButton(text='üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ PDF', callback_data='get_pdf')]]))
        user_id = message.from_user.id
        usage_count[user_id] = usage_count.get(user_id, 0) + 1
        await state.clear()
        return
    try:
        area_val = float(text.replace(',', '.'))
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ (–≥–∞) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.")
        return
    if area_val <= 0:
        await message.answer("‚ùó –ü–ª–æ—â–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0.")
        return
    data = await state.get_data()
    yield_goal = data['yield_goal']
    crop = data['crop']
    prev_crop = data['prev_crop']
    moisture = data['moisture']
    soil_type = data['soil_type']
    base_requirements = {
        "–ø—à–µ–Ω–∏—Ü—è": {"N": 25, "P": 8, "K": 18},
        "–∫—É–∫—É—Ä—É–¥–∑–∞": {"N": 22, "P": 10, "K": 20},
        "—Å–æ–Ω—è—à–Ω–∏–∫": {"N": 30, "P": 15, "K": 60},
        "—Å–æ—è": {"N": 10, "P": 15, "K": 25},
        "—Ä—ñ–ø–∞–∫": {"N": 45, "P": 12, "K": 35},
        "—è—á–º—ñ–Ω—å": {"N": 20, "P": 8, "K": 18}
    }
    if crop not in base_requirements:
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ—Ç—Ä–µ–±–∏.")
    else:
        # –ü–æ–≤—Ç–æ—Ä—é—î–º–æ —Ç—ñ —Å–∞–º—ñ –ø–æ–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ω–∞ –ø–ª–æ—â—É
        N_factor = P_factor = K_factor = 1.0
        if prev_crop == "–ë–æ–±–æ–≤—ñ":
            N_factor *= 0.8
        if prev_crop == "–ß–∏—Å—Ç–∏–π –ø–∞—Ä":
            N_factor *= 0.9
        if prev_crop in ["–¢–µ—Ö–Ω—ñ—á–Ω—ñ", "–û–≤–æ—á—ñ"]:
            N_factor *= 1.1
            P_factor *= 1.1
            K_factor *= 1.1
        if moisture == "–ù–∏–∑—å–∫–∞":
            N_factor *= 0.9
            P_factor *= 0.9
            K_factor *= 0.9
        elif moisture == "–î–æ—Å—Ç–∞—Ç–Ω—è":
            N_factor *= 1.1
            P_factor *= 1.1
            K_factor *= 1.1
        if soil_type in ["–ø—ñ—â–∞–Ω–∏–π", "—Å—É–ø—ñ—â–∞–Ω–∏–π"]:
            N_factor *= 1.1
            P_factor *= 1.1
            K_factor *= 1.1
        elif soil_type == "—á–æ—Ä–Ω–æ–∑–µ–º":
            N_factor *= 0.9
            P_factor *= 0.9
            K_factor *= 0.9
        elif soil_type in ["–≥–ª–∏–Ω–∏—Å—Ç–∏–π", "—Å—ñ—Ä–æ–∑–µ–º"]:
            N_factor *= 0.95
            P_factor *= 0.95
            K_factor *= 0.95
        base = base_requirements[crop]
        N_rate = base["N"] * N_factor
        P_rate = base["P"] * P_factor
        K_rate = base["K"] * K_factor
        total_N = N_rate * yield_goal * area_val
        total_P = P_rate * yield_goal * area_val
        total_K = K_rate * yield_goal * area_val
        total_text = f"üî∏ –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ—Ç—Ä–µ–±–∞ –¥–æ–±—Ä–∏–≤ –Ω–∞ –ø–ª–æ—â—É {area_val} –≥–∞:\n    - –ê–∑–æ—Ç (N): {total_N:.1f} –∫–≥\n    - –§–æ—Å—Ñ–æ—Ä (P): {total_P:.1f} –∫–≥\n    - –ö–∞–ª—ñ–π (K): {total_K:.1f} –∫–≥"
        await message.answer(total_text)
    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫: –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ—á–∞—Ç–∫—É –∞–±–æ PDF
    await message.answer("‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ PDF.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üìä –ù–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫', callback_data='calc_fertilizer')],[InlineKeyboardButton(text='üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ PDF', callback_data='get_pdf')]]))
    user_id = message.from_user.id
    usage_count[user_id] = usage_count.get(user_id, 0) + 1
    await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF
@dp.callback_query(lambda c: c.data == "get_pdf")
async def send_pdf(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    pdf_content = None
    pdf_data = None
    try:
        pdf_data = await dp.storage.get_data(chat=callback_query.message.chat.id, user=callback_query.from_user.id)
    except Exception:
        pdf_data = None
    if pdf_data and 'crop' in pdf_data:
        # –Ø–∫—â–æ —î –¥–∞–Ω—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É (–ø—Ä–∏–ø—É—â–µ–Ω–Ω—è)
        crop = pdf_data.get('crop', '')
        pdf_content = f"–û—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –∂–∏–≤–ª–µ–Ω–Ω—é –¥–ª—è {crop}"
    if not pdf_content:
        pdf_content = "–ü—Ä–∏–∫–ª–∞–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –ø–æ –∂–∏–≤–ª–µ–Ω–Ω—é"
    pdf_file = await generate_pdf(pdf_content)
    await bot.send_document(callback_query.from_user.id, InputFile(pdf_file))

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ –∫—É–ª—å—Ç—É—Ä (–ø–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞)
@dp.callback_query(lambda c: c.data == "crop_guide")
async def show_crop_guide(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("‚ÑπÔ∏è –î–æ–≤—ñ–¥–Ω–∏–∫ –∫—É–ª—å—Ç—É—Ä –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–ø–∏—Ç—É –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
@dp.pre_checkout_query(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–±—Ä–æ–±–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏
@dp.message(lambda message: message.successful_payment is not None)
async def payment_success(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    payment_count[user_id] = payment_count.get(user_id, 0) + 1
    await message.answer("‚úÖ –û–ø–ª–∞—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–æ! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤–∏–±—ñ—Ä –∫—É–ª—å—Ç—É—Ä–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É.")
    # –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏
    await state.set_state(FertilizerCalculation.crop)
    crop_kb = create_keyboard(crops)
    await message.answer("üåæ –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=crop_kb)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
