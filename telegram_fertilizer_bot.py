import asyncio
from aiogram import Bot, Dispatcher, types
import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, LabeledPrice, PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types.input_file import InputFile
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ .env (—Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–∞ LiqPay –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
load_dotenv()
TOKEN = os.getenv('TOKEN')
PROVIDER_TOKEN = os.getenv('PROVIDER_TOKEN')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ –æ–ø–ª–∞—Ç
usage_count = {}    # –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
payment_count = {}  # –ª—ñ—á–∏–ª—å–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–∏—Ö –æ–ø–ª–∞—Ç –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
final_recommendations = {}  # –æ—Å—Ç–∞–Ω–Ω—ñ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

# –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–µ–æ–±–º–µ–∂–µ–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º)
ADMIN_IDS = []  # –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤, —â–æ –º–∞—é—Ç—å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è FSM (–∫—Ä–æ–∫–∏ —Å—Ü–µ–Ω–∞—Ä—ñ—é –≤–∑–∞—î–º–æ–¥—ñ—ó)
class FertilizerCalculation(StatesGroup):
    crop = State()       # –≤–∏–±—ñ—Ä –∫—É–ª—å—Ç—É—Ä–∏
    prev_crop = State()  # –≤–∏–±—ñ—Ä –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏
    region = State()     # –≤–∏–±—ñ—Ä —Ä–µ–≥—ñ–æ–Ω—É
    yield_goal = State() # –≤–≤–µ–¥–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ—ó –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ
    soil_type = State()  # –≤–∏–±—ñ—Ä —Ç–∏–ø—É “ë—Ä—É–Ω—Ç—É
    ph = State()         # –≤–≤–µ–¥–µ–Ω–Ω—è pH “ë—Ä—É–Ω—Ç—É
    form_choice = State() # –≤–∏–±—ñ—Ä –∑–º—ñ–Ω–∏ —Ñ–æ—Ä–º–∏ –¥–æ–±—Ä–∏–≤ —á–∏ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
    choose_n = State()    # –≤–∏–±—ñ—Ä —Ñ–æ—Ä–º–∏ –∞–∑–æ—Ç–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞
    choose_p = State()    # –≤–∏–±—ñ—Ä —Ñ–æ—Ä–º–∏ —Ñ–æ—Å—Ñ–æ—Ä–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞
    choose_k = State()    # –≤–∏–±—ñ—Ä —Ñ–æ—Ä–º–∏ –∫–∞–ª—ñ–π–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞
    area = State()        # –≤–≤–µ–¥–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø–æ–ª—è –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É

# –î–æ–≤—ñ–¥–∫–æ–≤—ñ —Å–ø–∏—Å–∫–∏ —Ç–∞ —Å–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤–∏–±–æ—Ä—É
crops = ['–ü—à–µ–Ω–∏—Ü—è', '–ö—É–∫—É—Ä—É–¥–∑–∞', '–°–æ–Ω—è—à–Ω–∏–∫', '–†—ñ–ø–∞–∫', '–Ø—á–º—ñ–Ω—å', '–°–æ—è']
soil_types = ['–ß–æ—Ä–Ω–æ–∑–µ–º', '–°—ñ—Ä–æ–∑–µ–º', '–ü—ñ—â–∞–Ω–∏–π', '–ì–ª–∏–Ω–∏—Å—Ç–∏–π', '–°—É–ø—ñ—â–∞–Ω–∏–π']
previous_crops = ['–ó–µ—Ä–Ω–æ–≤—ñ', '–ë–æ–±–æ–≤—ñ', '–¢–µ—Ö–Ω—ñ—á–Ω—ñ', '–û–≤–æ—á—ñ', '–ß–∏—Å—Ç–∏–π –ø–∞—Ä']
regions = [
    '–í—ñ–Ω–Ω–∏—Ü—å–∫–∞', '–í–æ–ª–∏–Ω—Å—å–∫–∞', '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞', '–î–æ–Ω–µ—Ü—å–∫–∞', '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞',
    '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞', '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞', '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞', '–ö–∏—ó–≤—Å—å–∫–∞', '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞',
    '–õ—É–≥–∞–Ω—Å—å–∫–∞', '–õ—å–≤—ñ–≤—Å—å–∫–∞', '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞', '–û–¥–µ—Å—å–∫–∞', '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞',
    '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞', '–°—É–º—Å—å–∫–∞', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞', '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞', '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞',
    '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞', '–ß–µ—Ä–∫–∞—Å—å–∫–∞', '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞', '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞'
]

# –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –∑–∞ –∑–æ–Ω–∞–º–∏ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è (–Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –æ–ø–∞–¥—ñ–≤)
region_to_zone = {
    # –ù–∏–∑—å–∫–∞ –∑–≤–æ–ª–æ–∂–µ–Ω—ñ—Å—Ç—å (–ø—ñ–≤–¥–µ–Ω—å, —á–∞—Å—Ç–∫–æ–≤–æ —Å—Ö—ñ–¥)
    '–û–¥–µ—Å—å–∫–∞': '–ù–∏–∑—å–∫–∞', '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞': '–ù–∏–∑—å–∫–∞', '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞': '–ù–∏–∑—å–∫–∞',
    '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞': '–ù–∏–∑—å–∫–∞', '–î–æ–Ω–µ—Ü—å–∫–∞': '–ù–∏–∑—å–∫–∞', '–õ—É–≥–∞–Ω—Å—å–∫–∞': '–ù–∏–∑—å–∫–∞',
    '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞': '–ù–∏–∑—å–∫–∞', '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞': '–ù–∏–∑—å–∫–∞',
    # –°–µ—Ä–µ–¥–Ω—è –∑–≤–æ–ª–æ–∂–µ–Ω—ñ—Å—Ç—å (—Ü–µ–Ω—Ç—Ä, —á–∞—Å—Ç–∫–æ–≤–æ —Å—Ö—ñ–¥/–∑–∞—Ö—ñ–¥)
    '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞': '–°–µ—Ä–µ–¥–Ω—è', '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞': '–°–µ—Ä–µ–¥–Ω—è', '–ß–µ—Ä–∫–∞—Å—å–∫–∞': '–°–µ—Ä–µ–¥–Ω—è',
    '–ö–∏—ó–≤—Å—å–∫–∞': '–°–µ—Ä–µ–¥–Ω—è', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞': '–°–µ—Ä–µ–¥–Ω—è', '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞': '–°–µ—Ä–µ–¥–Ω—è',
    '–í—ñ–Ω–Ω–∏—Ü—å–∫–∞': '–°–µ—Ä–µ–¥–Ω—è',
    # –î–æ—Å—Ç–∞—Ç–Ω—è –∑–≤–æ–ª–æ–∂–µ–Ω—ñ—Å—Ç—å (–∑–∞—Ö—ñ–¥, –ø—ñ–≤–Ω—ñ—á)
    '–õ—å–≤—ñ–≤—Å—å–∫–∞': '–î–æ—Å—Ç–∞—Ç–Ω—è', '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞': '–î–æ—Å—Ç–∞—Ç–Ω—è', '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞': '–î–æ—Å—Ç–∞—Ç–Ω—è',
    '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞': '–î–æ—Å—Ç–∞—Ç–Ω—è', '–í–æ–ª–∏–Ω—Å—å–∫–∞': '–î–æ—Å—Ç–∞—Ç–Ω—è', '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞': '–î–æ—Å—Ç–∞—Ç–Ω—è',
    '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞': '–î–æ—Å—Ç–∞—Ç–Ω—è', '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞': '–î–æ—Å—Ç–∞—Ç–Ω—è', '–°—É–º—Å—å–∫–∞': '–î–æ—Å—Ç–∞—Ç–Ω—è'
}
# –ü—Ä–∏–º—ñ—Ç–∫–∞: –†–µ–≥—ñ–æ–Ω–∏, –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ —É —Å–ª–æ–≤–Ω–∏–∫—É, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–≤–∞–∂–∞—é—Ç—å—Å—è —Å–µ—Ä–µ–¥–Ω—å–æ–∑–≤–æ–ª–æ–∂–µ–Ω–∏–º–∏.

# –°–µ—Ä–µ–¥–Ω—è –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å –ø–æ –£–∫—Ä–∞—ó–Ω—ñ (–ú—ñ–Ω–∞–≥—Ä–æ–ø–æ–ª—ñ—Ç–∏–∫–∏, 2024) –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫—É–ª—å—Ç—É—Ä, —Ç/–≥–∞
national_yield_2024 = {
    '–ø—à–µ–Ω–∏—Ü—è': 4.47,    # 44.7 —Ü/–≥–∞
    '–∫—É–∫—É—Ä—É–¥–∑–∞': 6.40,  # 64.0 —Ü/–≥–∞
    '—Å–æ–Ω—è—à–Ω–∏–∫': 2.30,   # ~23 —Ü/–≥–∞
    '—Ä—ñ–ø–∞–∫': 2.74,      # 27.4 —Ü/–≥–∞
    '—è—á–º—ñ–Ω—å': 3.81,     # 38.1 —Ü/–≥–∞
    '—Å–æ—è': 2.28         # 22.8 —Ü/–≥–∞
}

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" —Ç–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
def create_keyboard(options, add_back=False, add_skip=False):
    keyboard = [[KeyboardButton(text=option)] for option in options]
    if add_back:
        keyboard.append([KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')])
    if add_skip:
        keyboard.append([KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏')])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF —ñ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏
async def generate_pdf(recommendation_text: str):
    filename = 'recommendation.pdf'
    c = canvas.Canvas(filename, pagesize=letter)
    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ —Ä—è–¥–∫–∏
    lines = recommendation_text.split('\n')
    y = 750  # –ø–æ—á–∞—Ç–∫–æ–≤–∞ –≤–∏—Å–æ—Ç–∞ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
    c.setFont('Helvetica', 12)
    c.drawString(50, y + 20, '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –∂–∏–≤–ª–µ–Ω–Ω—é')  # –∑–∞–≥–æ–ª–æ–≤–æ–∫
    for line in lines:
        c.drawString(50, y, line)
        y -= 20  # –∑–º—ñ—â—É—î–º–æ—Å—è –≤–Ω–∏–∑ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    c.save()
    return filename

# –ö–æ–º–∞–Ω–¥–∞ /start - —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤', callback_data='calc_fertilizer')],
        [InlineKeyboardButton(text='üå± –î–æ–≤—ñ–¥–Ω–∏–∫ –∫—É–ª—å—Ç—É—Ä', callback_data='crop_guide')],
        [InlineKeyboardButton(text='üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ PDF', callback_data='get_pdf')]
    ])
    await message.answer('–í—ñ—Ç–∞—é! –Ø –±–æ—Ç-–∞–≥—Ä–æ–Ω–æ–º. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤" –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ª—ñ–º—ñ—Ç—É —ñ –æ–ø–ª–∞—Ç–∏
@dp.callback_query(lambda c: c.data == 'calc_fertilizer')
async def start_calculation(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ (1 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π + –∫–æ–∂–µ–Ω –æ–ø–ª–∞—á–µ–Ω–∏–π –¥–æ–¥–∞—î —â–µ 1)
    if user_id not in ADMIN_IDS:
        if usage_count.get(user_id, 0) >= 1 + payment_count.get(user_id, 0):
            # –í–∏–º–∞–≥–∞—î–º–æ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ LiqPay (—Ü—ñ–Ω–∞ –≤ –∫–æ–ø—ñ–π–∫–∞—Ö: 1000 = 10.00 USD)
            prices = [LabeledPrice(label='–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫', amount=1000)]
            await callback_query.answer()  # –∑–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É
            await bot.send_invoice(
                chat_id=user_id,
                title='–û–ø–ª–∞—Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É',
                description='–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤',
                provider_token=PROVIDER_TOKEN,
                currency='USD',
                prices=prices,
                payload='calc_payment'
            )
            return
    # –Ø–∫—â–æ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ ‚Äì –ø–æ—á–∏–Ω–∞—î–º–æ —Å—Ü–µ–Ω–∞—Ä—ñ–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
    await state.set_state(FertilizerCalculation.crop)
    crop_keyboard = create_keyboard(crops)
    await callback_query.message.answer('üåæ –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:', reply_markup=crop_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏
@dp.message(FertilizerCalculation.crop)
async def select_crop(message: types.Message, state: FSMContext):
    text = message.text
    if text not in crops:
        await message.answer('‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.')
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –∫—É–ª—å—Ç—É—Ä–∏ (—É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —Å–ª–æ–≤–Ω–∏–∫–∞—Ö)
    await state.update_data(crop=text.lower())
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏
    await state.set_state(FertilizerCalculation.prev_crop)
    prev_crop_kb = create_keyboard(previous_crops, add_back=True)
    await message.answer('‚ôªÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏:', reply_markup=prev_crop_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏
@dp.message(FertilizerCalculation.prev_crop)
async def select_prev_crop(message: types.Message, state: FSMContext):
    text = message.text
    if text.endswith('–ù–∞–∑–∞–¥'):
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏
        await state.set_state(FertilizerCalculation.crop)
        crop_kb = create_keyboard(crops)
        await message.answer('üåæ –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:', reply_markup=crop_kb)
        return
    if text not in previous_crops:
        await message.answer('‚ùó –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫ –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.')
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∫—É–ª—å—Ç—É—Ä—É
    await state.update_data(prev_crop=text)
    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É —Ä–µ–≥—ñ–æ–Ω—É
    await state.set_state(FertilizerCalculation.region)
    region_kb = create_keyboard(regions, add_back=True)
    await message.answer('üìç –û–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è:', reply_markup=region_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ä–µ–≥—ñ–æ–Ω—É
@dp.message(FertilizerCalculation.region)
async def select_region(message: types.Message, state: FSMContext):
    text = message.text
    if text.endswith('–ù–∞–∑–∞–¥'):
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏
        await state.set_state(FertilizerCalculation.prev_crop)
        prev_crop_kb = create_keyboard(previous_crops, add_back=True)
        await message.answer('‚ôªÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫—É–ª—å—Ç—É—Ä–∏:', reply_markup=prev_crop_kb)
        return
    if text not in regions:
        await message.answer('‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.')
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–≥—ñ–æ–Ω
    await state.update_data(region=text)
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–æ–Ω—É –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É
    zone = region_to_zone.get(text, '–°–µ—Ä–µ–¥–Ω—è')
    await state.update_data(moisture=zone)
    # –ó–∞–ø–∏—Ç—É—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å
    await state.set_state(FertilizerCalculation.yield_goal)
    yield_kb = create_keyboard([], add_back=True)
    await message.answer('üìä –í–∫–∞–∂—ñ—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω—É –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å (—Ç/–≥–∞):', reply_markup=yield_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ—ó –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ
@dp.message(FertilizerCalculation.yield_goal)
async def input_yield(message: types.Message, state: FSMContext):
    text = message.text
    if text.endswith('–ù–∞–∑–∞–¥'):
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É —Ä–µ–≥—ñ–æ–Ω—É
        await state.set_state(FertilizerCalculation.region)
        region_kb = create_keyboard(regions, add_back=True)
        await message.answer('üìç –û–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è:', reply_markup=region_kb)
        return
    # –û–±—Ä–æ–±–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ
    try:
        yield_goal = float(text.replace(',', '.'))
    except ValueError:
        await message.answer('‚ùó –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ (–º–æ–∂–Ω–∞ –¥—Ä–æ–±–æ–≤–µ).')
        return
    if yield_goal <= 0:
        await message.answer('‚ùó –í—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0.')
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å
    await state.update_data(yield_goal=yield_goal)
    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É “ë—Ä—É–Ω—Ç—É
    await state.set_state(FertilizerCalculation.soil_type)
    soil_kb = create_keyboard(soil_types, add_back=True)
    await message.answer('üü§ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:', reply_markup=soil_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É “ë—Ä—É–Ω—Ç—É
@dp.message(FertilizerCalculation.soil_type)
async def select_soil(message: types.Message, state: FSMContext):
    text = message.text
    if text.endswith('–ù–∞–∑–∞–¥'):
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ
        await state.set_state(FertilizerCalculation.yield_goal)
        yield_kb = create_keyboard([], add_back=True)
        await message.answer('üìä –í–∫–∞–∂—ñ—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω—É –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å (—Ç/–≥–∞):', reply_markup=yield_kb)
        return
    if text not in soil_types:
        await message.answer('‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.')
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø “ë—Ä—É–Ω—Ç—É (—É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —Å–ª–æ–≤–Ω–∏–∫–∞—Ö)
    await state.update_data(soil_type=text.lower())
    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è pH “ë—Ä—É–Ω—Ç—É
    await state.set_state(FertilizerCalculation.ph)
    ph_kb = create_keyboard([], add_back=True)
    await message.answer('üß™ –í–≤–µ–¥—ñ—Ç—å pH “ë—Ä—É–Ω—Ç—É:', reply_markup=ph_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è pH “ë—Ä—É–Ω—Ç—É —Ç–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
@dp.message(FertilizerCalculation.ph)
async def compute_recommendations(message: types.Message, state: FSMContext):
    text = message.text
    if text.endswith('–ù–∞–∑–∞–¥'):
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É “ë—Ä—É–Ω—Ç—É
        await state.set_state(FertilizerCalculation.soil_type)
        soil_kb = create_keyboard(soil_types, add_back=True)
        await message.answer('üü§ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:', reply_markup=soil_kb)
        return
    # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è pH —è–∫ —á–∏—Å–ª–∞
    try:
        ph_value = float(text.replace(',', '.'))
    except ValueError:
        await message.answer('‚ùó –í–≤–µ–¥—ñ—Ç—å pH —è–∫ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 5.5.')
        return
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑—ñ–±—Ä–∞–Ω—ñ —Ä–∞–Ω—ñ—à–µ –¥–∞–Ω—ñ —ñ–∑ FSM
    data = await state.get_data()
    crop = data['crop']
    yield_goal = data['yield_goal']
    prev_crop = data['prev_crop']
    moisture = data['moisture']
    soil_type = data['soil_type']
    region = data.get('region', '')
    # –ë–∞–∑–æ–≤—ñ –≤–∏–º–æ–≥–∏ –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–∫–≥ –µ–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ 1 —Ç —É—Ä–æ–∂–∞—é) –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫—É–ª—å—Ç—É—Ä
    base_requirements = {
        '–ø—à–µ–Ω–∏—Ü—è': {'N': 30, 'P': 10, 'K': 20},
        '–∫—É–∫—É—Ä—É–¥–∑–∞': {'N': 25, 'P': 12, 'K': 25},
        '—Å–æ–Ω—è—à–Ω–∏–∫': {'N': 42, 'P': 18, 'K': 85},
        '—Å–æ—è': {'N': 15, 'P': 20, 'K': 30},
        '—Ä—ñ–ø–∞–∫': {'N': 50, 'P': 15, 'K': 40},
        '—è—á–º—ñ–Ω—å': {'N': 25, 'P': 10, 'K': 20}
    }
    result_text = ''
    if crop not in base_requirements:
        result_text = '–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–∞ –∫—É–ª—å—Ç—É—Ä–∞.'
    else:
        # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∞, –∑–æ–Ω–∏ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è —ñ —Ç–∏–ø—É “ë—Ä—É–Ω—Ç—É
        N_factor = P_factor = K_factor = 1.0
        # –ü–æ–ø–µ—Ä–µ–¥–Ω—è –∫—É–ª—å—Ç—É—Ä–∞
        if prev_crop == '–ë–æ–±–æ–≤—ñ':
            N_factor *= 0.8  # –ø—ñ—Å–ª—è –±–æ–±–æ–≤–∏—Ö –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±—ñ–ª—å—à–µ –∞–∑–æ—Ç—É –≤ “ë—Ä—É–Ω—Ç—ñ
        if prev_crop == '–ß–∏—Å—Ç–∏–π –ø–∞—Ä':
            N_factor *= 0.9  # –ø—ñ—Å–ª—è –ø–∞—Ä—É –ø–æ—Ç—Ä—ñ–±–Ω–µ —Ç—Ä–æ—Ö–∏ –º–µ–Ω—à–µ –∞–∑–æ—Ç—É
        if prev_crop in ['–¢–µ—Ö–Ω—ñ—á–Ω—ñ', '–û–≤–æ—á—ñ']:
            # –ø—ñ—Å–ª—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Ç–∞ –æ–≤–æ—á–µ–≤–∏—Ö –∫—É–ª—å—Ç—É—Ä –º–æ–∂–ª–∏–≤–µ –≤–∏—Å–Ω–∞–∂–µ–Ω–Ω—è “ë—Ä—É–Ω—Ç—É
            N_factor *= 1.1
            P_factor *= 1.1
            K_factor *= 1.1
        # –ó–æ–Ω–∞ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è
        if moisture == '–ù–∏–∑—å–∫–∞':
            # –£ –ø–æ—Å—É—à–ª–∏–≤–∏—Ö —É–º–æ–≤–∞—Ö –∑–º–µ–Ω—à—É—î–º–æ –Ω–æ—Ä–º–∏ (~ -10%)
            N_factor *= 0.9
            P_factor *= 0.9
            K_factor *= 0.9
        elif moisture == '–î–æ—Å—Ç–∞—Ç–Ω—è':
            # –£ –≤–æ–ª–æ–≥–∏—Ö —É–º–æ–≤–∞—Ö –∑–±—ñ–ª—å—à—É—î–º–æ –Ω–æ—Ä–º–∏ (~ +10%)
            N_factor *= 1.1
            P_factor *= 1.1
            K_factor *= 1.1
        # –¢–∏–ø “ë—Ä—É–Ω—Ç—É
        if soil_type in ['–ø—ñ—â–∞–Ω–∏–π', '—Å—É–ø—ñ—â–∞–Ω–∏–π']:
            # –õ–µ–≥–∫—ñ “ë—Ä—É–Ω—Ç–∏ (–ø—ñ—Å–∫–∏) –≥—ñ—Ä—à–µ —É—Ç—Ä–∏–º—É—é—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏ ‚Äì –∑–±—ñ–ª—å—à—É—î–º–æ –Ω–æ—Ä–º—É
            N_factor *= 1.1
            P_factor *= 1.1
            K_factor *= 1.1
        elif soil_type == '—á–æ—Ä–Ω–æ–∑–µ–º':
            # –†–æ–¥—é—á—ñ —á–æ—Ä–Ω–æ–∑–µ–º–∏ ‚Äì —Ç—Ä–æ—Ö–∏ –∑–º–µ–Ω—à—É—î–º–æ –Ω–æ—Ä–º—É, —á–∞—Å—Ç–∏–Ω–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑–∞–±–µ–∑–ø–µ—á–∏—Ç—å—Å—è “ë—Ä—É–Ω—Ç–æ–º
            N_factor *= 0.9
            P_factor *= 0.9
            K_factor *= 0.9
        elif soil_type in ['–≥–ª–∏–Ω–∏—Å—Ç–∏–π', '—Å—ñ—Ä–æ–∑–µ–º']:
            # –ì–ª–∏–Ω–∏—Å—Ç—ñ —Ç–∞ —Å—ñ—Ä–æ–∑–µ–º–∏ ‚Äì –Ω–µ–∑–Ω–∞—á–Ω–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è –Ω–æ—Ä–º
            N_factor *= 0.95
            P_factor *= 0.95
            K_factor *= 0.95
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç—Ä–µ–±–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ 1 –≥–∞ –¥–ª—è –ø–ª–∞–Ω–æ–≤–æ—ó –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ
        base = base_requirements[crop]
        N_rate = base['N'] * N_factor   # –∫–≥ N –Ω–∞ 1 —Ç —É—Ä–æ–∂–∞—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ–ø—Ä–∞–≤–æ–∫
        P_rate = base['P'] * P_factor   # –∫–≥ P2O5 –Ω–∞ 1 —Ç —É—Ä–æ–∂–∞—é
        K_rate = base['K'] * K_factor   # –∫–≥ K2O –Ω–∞ 1 —Ç —É—Ä–æ–∂–∞—é
        N_per_ha = N_rate * yield_goal  # –∫–≥ N –Ω–∞ 1 –≥–∞
        P_per_ha = P_rate * yield_goal  # –∫–≥ P2O5 –Ω–∞ 1 –≥–∞
        K_per_ha = K_rate * yield_goal  # –∫–≥ K2O –Ω–∞ 1 –≥–∞
        crop_name = crop.capitalize()
        result_text += f'üîπ –î–ª—è –∫—É–ª—å—Ç—É—Ä–∏ {crop_name} –ø—Ä–∏ –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ {yield_goal:.1f} —Ç/–≥–∞:\n'
        result_text += f'   - –ê–∑–æ—Ç (N): {N_per_ha:.1f} –∫–≥/–≥–∞\n'
        result_text += f'   - –§–æ—Å—Ñ–æ—Ä (P): {P_per_ha:.1f} –∫–≥/–≥–∞\n'
        result_text += f'   - –ö–∞–ª—ñ–π (K): {K_per_ha:.1f} –∫–≥/–≥–∞\n'
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–µ–¥–Ω—é –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å —É —Ä–µ–≥—ñ–æ–Ω—ñ (2024) –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏
        if region:
            avg_yield = None
            if crop in national_yield_2024:
                base_avg = national_yield_2024[crop]
                zone_factor = 1.0
                if moisture == '–î–æ—Å—Ç–∞—Ç–Ω—è':
                    zone_factor = 1.3  # –≤–æ–ª–æ–≥–∏–π —Ä–µ–≥—ñ–æ–Ω ~30% –≤–∏—â–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ
                elif moisture == '–ù–∏–∑—å–∫–∞':
                    zone_factor = 0.7  # –ø–æ—Å—É—à–ª–∏–≤–∏–π —Ä–µ–≥—ñ–æ–Ω ~30% –Ω–∏–∂—á–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ
                avg_yield = base_avg * zone_factor
            if avg_yield:
                result_text += f'   (–°–µ—Ä–µ–¥–Ω—è –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å {crop_name} –≤ {region} —É 2024 —Ä. ~ {avg_yield:.1f} —Ç/–≥–∞)\n'
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –≤–∞–ø–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –Ω–∏–∑—å–∫–æ–º—É pH
        if ph_value < 5.0:
            result_text += f'‚ö†Ô∏è “ê—Ä—É–Ω—Ç –∫–∏—Å–ª–∏–π (pH {ph_value}). –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∞–ø–Ω—É–≤–∞–Ω–Ω—è (~2 —Ç/–≥–∞ –≤–∞–ø–Ω–∞).\n'
        elif ph_value < 5.5:
            result_text += f'‚ö†Ô∏è “ê—Ä—É–Ω—Ç –∫–∏—Å–ª–∏–π (pH {ph_value}). –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∞–ø–Ω—É–≤–∞–Ω–Ω—è (~1 —Ç/–≥–∞ –≤–∞–ø–Ω–∞).\n'
        else:
            result_text += '‚úÖ pH “ë—Ä—É–Ω—Ç—É –≤ –Ω–æ—Ä–º—ñ, –≤–∞–ø–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ.\n'
        # –†–æ–∑–ø–æ–¥—ñ–ª –¥–æ–±—Ä–∏–≤ –ø–æ —Ñ–∞–∑–∞—Ö —Ä–æ—Å—Ç—É (—á–∞—Å—Ç–∫–∞ –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –Ω–æ—Ä–º–∏ –ø–æ –∫–æ–∂–Ω–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—É)
        phase_distribution = {
            '–ø—à–µ–Ω–∏—Ü—è': {
                'N': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 0.5), ('—É —Ñ–∞–∑—ñ –∫—É—â—ñ–Ω–Ω—è', 0.5)],
                'P': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)],
                'K': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)]
            },
            '–∫—É–∫—É—Ä—É–¥–∑–∞': {
                'N': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 0.5), ('—É —Ñ–∞–∑—ñ 6-8 –ª–∏—Å—Ç–∫—ñ–≤', 0.5)],
                'P': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)],
                'K': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)]
            },
            '—Å–æ–Ω—è—à–Ω–∏–∫': {
                'N': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 0.7), ('–Ω–∞ –ø–æ—á–∞—Ç–∫—É –±—É—Ç–æ–Ω—ñ–∑–∞—Ü—ñ—ó', 0.3)],
                'P': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)],
                'K': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)]
            },
            '—Å–æ—è': {
                'N': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 0.5), ('–Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ü–≤—ñ—Ç—ñ–Ω–Ω—è', 0.5)],
                'P': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)],
                'K': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)]
            },
            '—Ä—ñ–ø–∞–∫': {
                'N': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 0.5), ('–Ω–∞ –ø–æ—á–∞—Ç–∫—É –≤–µ—Å–Ω—è–Ω–æ—ó –≤–µ–≥–µ—Ç–∞—Ü—ñ—ó', 0.5)],
                'P': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)],
                'K': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)]
            },
            '—è—á–º—ñ–Ω—å': {
                'N': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 0.5), ('—É —Ñ–∞–∑—ñ –∫—É—â—ñ–Ω–Ω—è', 0.5)],
                'P': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)],
                'K': [('–ø–µ—Ä–µ–¥ —Å—ñ–≤–±–æ—é', 1.0)]
            }
        }
        result_text += 'üìà –†–æ–∑–ø–æ–¥—ñ–ª –¥–æ–±—Ä–∏–≤ –ø–æ —Ñ–∞–∑–∞—Ö —Ä–æ—Å—Ç—É:\n'
        if crop in phase_distribution:
            phases = phase_distribution[crop]
            for nutrient, phases_list in phases.items():
                if phases_list:
                    name_ukr = '–ê–∑–æ—Ç' if nutrient == 'N' else '–§–æ—Å—Ñ–æ—Ä' if nutrient == 'P' else '–ö–∞–ª—ñ–π'
                    portions = []
                    total_per_ha = N_per_ha if nutrient == 'N' else P_per_ha if nutrient == 'P' else K_per_ha
                    for phase, fraction in phases_list:
                        amount = total_per_ha * fraction
                        portions.append(f'{amount:.1f} –∫–≥ - {phase}')
                    result_text += f'   - {name_ukr}: ' + '; '.join(portions) + '\n'
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –ø–æ—Ç—Ä–µ–±–∏ (–¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –∫—Ä–æ–∫—ñ–≤)
        await state.update_data(N_per_ha=N_per_ha, P_per_ha=P_per_ha, K_per_ha=K_per_ha)
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π (–Ω–æ—Ä–º–∏ —ñ —Ñ–∞–∑–∏)
    await message.answer(result_text)
    data = await state.get_data()
    # –í–∏–±—ñ—Ä —Ñ–æ—Ä–º–∏ –∞–∑–æ—Ç–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∑–æ–Ω–∏ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è
    if moisture == '–ù–∏–∑—å–∫–∞':
        N_form = '–ê–º–º—ñ–∞—á–Ω–∞ —Å–µ–ª—ñ—Ç—Ä–∞ (34% N)'
        N_content = 0.34
    else:
        N_form = '–ö–∞—Ä–±–∞–º—ñ–¥ (46% N)'
        N_content = 0.46
    # –§–æ—Ä–º–∞ —Ñ–æ—Å—Ñ–æ—Ä–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞ (DAP –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
    P_form = '–î—ñ–∞–º–æ—Ñ–æ—Å—Ñ–∞—Ç (DAP, 46% P2O5)'
    P_content = 0.46
    # –§–æ—Ä–º–∞ –∫–∞–ª—ñ–π–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞ (—Ö–ª–æ—Ä–∏—Å—Ç–∏–π –∫–∞–ª—ñ–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
    K_form = '–ö–∞–ª—ñ–π —Ö–ª–æ—Ä–∏—Å—Ç–∏–π (KCl, 60% K2O)'
    K_content = 0.60
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —Ñ–æ—Ä–º —ñ –≤–º—ñ—Å—Ç –¥—ñ—é—á–æ—ó —Ä–µ—á–æ–≤–∏–Ω–∏ (%) –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞
    await state.update_data(N_form=N_form, P_form=P_form, K_form=K_form,
                             N_content=N_content, P_content=P_content, K_content=K_content)
    # –û–±—á–∏—Å–ª—é—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞ –Ω–∞ 1 –≥–∞
    N_per_ha = data['N_per_ha']
    P_per_ha = data['P_per_ha']
    K_per_ha = data['K_per_ha']
    N_fert_per_ha = N_per_ha / N_content
    P_fert_per_ha = P_per_ha / P_content
    K_fert_per_ha = K_per_ha / K_content
    fert_text = 'üíä –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞ (–Ω–∞ 1 –≥–∞):\n'
    fert_text += f'   - –ê–∑–æ—Ç: {N_fert_per_ha:.1f} –∫–≥ ‚Äî {N_form}\n'
    fert_text += f'   - –§–æ—Å—Ñ–æ—Ä: {P_fert_per_ha:.1f} –∫–≥ ‚Äî {P_form}\n'
    fert_text += f'   - –ö–∞–ª—ñ–π: {K_fert_per_ha:.1f} –∫–≥ ‚Äî {K_form}\n'
    fert_text += 'üí° –í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–∏–ø –¥–æ–±—Ä–∏–≤ –ø–µ—Ä–µ–¥ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–º —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º.'
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –≤–∏–±–æ—Ä—É –¥—ñ—ó (–∑–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏)
    await state.set_state(FertilizerCalculation.form_choice)
    form_kb = create_keyboard(['–ó–º—ñ–Ω–∏—Ç–∏ –∞–∑–æ—Ç', '–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Å—Ñ–æ—Ä', '–ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–ª—ñ–π', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏'], add_back=True)
    await message.answer(fert_text, reply_markup=form_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –¥—ñ—ó –Ω–∞ –µ—Ç–∞–ø—ñ –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º –¥–æ–±—Ä–∏–≤
@dp.message(FertilizerCalculation.form_choice)
async def change_or_continue(message: types.Message, state: FSMContext):
    text = message.text
    if text.endswith('–ù–∞–∑–∞–¥'):
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è pH
        await state.set_state(FertilizerCalculation.ph)
        ph_kb = create_keyboard([], add_back=True)
        await message.answer('üß™ –í–≤–µ–¥—ñ—Ç—å pH “ë—Ä—É–Ω—Ç—É:', reply_markup=ph_kb)
        return
    text_lower = text.lower()
    if '–∞–∑–æ—Ç' in text_lower:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –∑–º—ñ–Ω–∏—Ç–∏ –∞–∑–æ—Ç–Ω–µ –¥–æ–±—Ä–∏–≤–æ
        await state.set_state(FertilizerCalculation.choose_n)
        n_options = ['–ê–º–º—ñ–∞—á–Ω–∞ —Å–µ–ª—ñ—Ç—Ä–∞ (34% N)', '–ö–∞—Ä–±–∞–º—ñ–¥ (46% N)', '–ö–ê–° (32% N)']
        n_kb = create_keyboard(n_options, add_back=True)
        await message.answer('üîÑ –û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É –∞–∑–æ—Ç–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞:', reply_markup=n_kb)
    elif '—Ñ–æ—Å—Ñ–æ—Ä' in text_lower:
        # –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Å—Ñ–æ—Ä–Ω–µ –¥–æ–±—Ä–∏–≤–æ
        await state.set_state(FertilizerCalculation.choose_p)
        p_options = ['–î—ñ–∞–º–æ—Ñ–æ—Å—Ñ–∞—Ç (DAP, 46% P2O5)', '–°—É–ø–µ—Ä—Ñ–æ—Å—Ñ–∞—Ç (46% P2O5)']
        p_kb = create_keyboard(p_options, add_back=True)
        await message.answer('üîÑ –û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É —Ñ–æ—Å—Ñ–æ—Ä–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞:', reply_markup=p_kb)
    elif '–∫–∞–ª—ñ–π' in text_lower:
        # –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–ª—ñ–π–Ω–µ –¥–æ–±—Ä–∏–≤–æ
        await state.set_state(FertilizerCalculation.choose_k)
        k_options = ['–ö–∞–ª—ñ–π —Ö–ª–æ—Ä–∏—Å—Ç–∏–π (60% K2O)', '–ö–∞–ª—ñ–π —Å—É–ª—å—Ñ–∞—Ç (50% K2O)']
        k_kb = create_keyboard(k_options, add_back=True)
        await message.answer('üîÑ –û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É –∫–∞–ª—ñ–π–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞:', reply_markup=k_kb)
    elif '–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' in text_lower:
        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø–æ–ª—è (—Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –µ—Ç–∞–ø)
        await state.set_state(FertilizerCalculation.area)
        area_kb = create_keyboard([], add_back=True, add_skip=True)
        await message.answer('üìè –í–≤–µ–¥—ñ—Ç—å –ø–ª–æ—â—É –ø–æ–ª—è (–≥–∞) –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ—Ç—Ä–µ–±–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":', reply_markup=area_kb)
    else:
        await message.answer('‚ùó –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é —ñ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏: –∑–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É –¥–æ–±—Ä–∏–≤–∞ –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.')
        return

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ—ó —Ñ–æ—Ä–º–∏ –∞–∑–æ—Ç–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞
@dp.message(FertilizerCalculation.choose_n)
async def choose_n_form(message: types.Message, state: FSMContext):
    text = message.text
    if text.endswith('–ù–∞–∑–∞–¥'):
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é —Ñ–æ—Ä–º –¥–æ–±—Ä–∏–≤
        await state.set_state(FertilizerCalculation.form_choice)
        form_kb = create_keyboard(['–ó–º—ñ–Ω–∏—Ç–∏ –∞–∑–æ—Ç', '–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Å—Ñ–æ—Ä', '–ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–ª—ñ–π', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏'], add_back=True)
        await message.answer('‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è. –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥–∞–ª—å—à—É –¥—ñ—é:', reply_markup=form_kb)
        return
    # –ú–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∞–∑–æ—Ç–Ω–∏—Ö –¥–æ–±—Ä–∏–≤ —ñ —ó—Ö N-–≤–º—ñ—Å—Ç
    options = {'–ê–º–º—ñ–∞—á–Ω–∞ —Å–µ–ª—ñ—Ç—Ä–∞': (0.34, '–ê–º–º—ñ–∞—á–Ω–∞ —Å–µ–ª—ñ—Ç—Ä–∞ (34% N)'),
               '–ö–∞—Ä–±–∞–º—ñ–¥': (0.46, '–ö–∞—Ä–±–∞–º—ñ–¥ (46% N)'),
               '–ö–ê–°': (0.32, '–ö–ê–° (32% N)')}
    chosen = None
    for key in options:
        if key in text:
            chosen = options[key]
            break
    if not chosen:
        await message.answer('‚ùó –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∞–∑–æ—Ç–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞ –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö.')
        return
    N_content, N_form = chosen
    # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–±—ñ—Ä —Ñ–æ—Ä–º–∏ –∞–∑–æ—Ç–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞
    await state.update_data(N_content=N_content, N_form=N_form)
    # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–±—Ä–∏–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó —Ñ–æ—Ä–º–∏
    data = await state.get_data()
    N_per_ha = data['N_per_ha']
    P_per_ha = data['P_per_ha']
    K_per_ha = data['K_per_ha']
    P_content = data['P_content']
    K_content = data['K_content']
    P_form = data['P_form']
    K_form = data['K_form']
    N_fert_per_ha = N_per_ha / N_content
    P_fert_per_ha = P_per_ha / P_content
    K_fert_per_ha = K_per_ha / K_content
    fert_text = '‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–æ–±—Ä–∏–≤–∞ (–Ω–∞ 1 –≥–∞):\n'
    fert_text += f'   - –ê–∑–æ—Ç: {N_fert_per_ha:.1f} –∫–≥ ‚Äî {N_form}\n'
    fert_text += f'   - –§–æ—Å—Ñ–æ—Ä: {P_fert_per_ha:.1f} –∫–≥ ‚Äî {P_form}\n'
    fert_text += f'   - –ö–∞–ª—ñ–π: {K_fert_per_ha:.1f} –∫–≥ ‚Äî {K_form}\n'
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –¥—ñ—ó (–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—à—ñ –¥–æ–±—Ä–∏–≤–∞ –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏)
    await state.set_state(FertilizerCalculation.form_choice)
    form_kb = create_keyboard(['–ó–º—ñ–Ω–∏—Ç–∏ –∞–∑–æ—Ç', '–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Å—Ñ–æ—Ä', '–ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–ª—ñ–π', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏'], add_back=True)
    await message.answer(fert_text, reply_markup=form_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ—ó —Ñ–æ—Ä–º–∏ —Ñ–æ—Å—Ñ–æ—Ä–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞
@dp.message(FertilizerCalculation.choose_p)
async def choose_p_form(message: types.Message, state: FSMContext):
    text = message.text
    if text.endswith('–ù–∞–∑–∞–¥'):
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é —Ñ–æ—Ä–º –¥–æ–±—Ä–∏–≤
        await state.set_state(FertilizerCalculation.form_choice)
        form_kb = create_keyboard(['–ó–º—ñ–Ω–∏—Ç–∏ –∞–∑–æ—Ç', '–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Å—Ñ–æ—Ä', '–ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–ª—ñ–π', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏'], add_back=True)
        await message.answer('‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è. –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥–∞–ª—å—à—É –¥—ñ—é:', reply_markup=form_kb)
        return
    options = {'–î—ñ–∞–º–æ—Ñ–æ—Å—Ñ–∞—Ç': (0.46, '–î—ñ–∞–º–æ—Ñ–æ—Å—Ñ–∞—Ç (DAP, 46% P2O5)'),
               '–°—É–ø–µ—Ä—Ñ–æ—Å—Ñ–∞—Ç': (0.46, '–°—É–ø–µ—Ä—Ñ–æ—Å—Ñ–∞—Ç (46% P2O5)')}
    chosen = None
    for key in options:
        if key in text:
            chosen = options[key]
            break
    if not chosen:
        await message.answer('‚ùó –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç —Ñ–æ—Å—Ñ–æ—Ä–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞ –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö.')
        return
    P_content, P_form = chosen
    await state.update_data(P_content=P_content, P_form=P_form)
    # –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–æ–±—Ä–∏–≤ –∑ –Ω–æ–≤–æ—é —Ñ–æ—Ä–º–æ—é —Ñ–æ—Å—Ñ–æ—Ä—É
    data = await state.get_data()
    N_per_ha = data['N_per_ha']
    P_per_ha = data['P_per_ha']
    K_per_ha = data['K_per_ha']
    N_content = data['N_content']
    K_content = data['K_content']
    N_form = data['N_form']
    K_form = data['K_form']
    N_fert_per_ha = N_per_ha / N_content
    P_fert_per_ha = P_per_ha / P_content
    K_fert_per_ha = K_per_ha / K_content
    fert_text = '‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–æ–±—Ä–∏–≤–∞ (–Ω–∞ 1 –≥–∞):\n'
    fert_text += f'   - –ê–∑–æ—Ç: {N_fert_per_ha:.1f} –∫–≥ ‚Äî {N_form}\n'
    fert_text += f'   - –§–æ—Å—Ñ–æ—Ä: {P_fert_per_ha:.1f} –∫–≥ ‚Äî {P_form}\n'
    fert_text += f'   - –ö–∞–ª—ñ–π: {K_fert_per_ha:.1f} –∫–≥ ‚Äî {K_form}\n'
    await state.set_state(FertilizerCalculation.form_choice)
    form_kb = create_keyboard(['–ó–º—ñ–Ω–∏—Ç–∏ –∞–∑–æ—Ç', '–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Å—Ñ–æ—Ä', '–ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–ª—ñ–π', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏'], add_back=True)
    await message.answer(fert_text, reply_markup=form_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ—ó —Ñ–æ—Ä–º–∏ –∫–∞–ª—ñ–π–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞
@dp.message(FertilizerCalculation.choose_k)
async def choose_k_form(message: types.Message, state: FSMContext):
    text = message.text
    if text.endswith('–ù–∞–∑–∞–¥'):
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é —Ñ–æ—Ä–º –¥–æ–±—Ä–∏–≤
        await state.set_state(FertilizerCalculation.form_choice)
        form_kb = create_keyboard(['–ó–º—ñ–Ω–∏—Ç–∏ –∞–∑–æ—Ç', '–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Å—Ñ–æ—Ä', '–ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–ª—ñ–π', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏'], add_back=True)
        await message.answer('‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è. –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥–∞–ª—å—à—É –¥—ñ—é:', reply_markup=form_kb)
        return
    options = {'—Ö–ª–æ—Ä–∏—Å—Ç–∏–π': (0.60, '–ö–∞–ª—ñ–π —Ö–ª–æ—Ä–∏—Å—Ç–∏–π (KCl, 60% K2O)'),
               '—Å—É–ª—å—Ñ–∞—Ç': (0.50, '–ö–∞–ª—ñ–π —Å—É–ª—å—Ñ–∞—Ç (50% K2O)')}
    chosen = None
    for key in options:
        if key in text:
            chosen = options[key]
            break
    if not chosen:
        await message.answer('‚ùó –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∫–∞–ª—ñ–π–Ω–æ–≥–æ –¥–æ–±—Ä–∏–≤–∞ –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö.')
        return
    K_content, K_form = chosen
    await state.update_data(K_content=K_content, K_form=K_form)
    # –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–æ–±—Ä–∏–≤ –∑ –Ω–æ–≤–æ—é —Ñ–æ—Ä–º–æ—é –∫–∞–ª—ñ—é
    data = await state.get_data()
    N_per_ha = data['N_per_ha']
    P_per_ha = data['P_per_ha']
    K_per_ha = data['K_per_ha']
    N_content = data['N_content']
    P_content = data['P_content']
    N_form = data['N_form']
    P_form = data['P_form']
    N_fert_per_ha = N_per_ha / N_content
    P_fert_per_ha = P_per_ha / P_content
    K_fert_per_ha = K_per_ha / K_content
    fert_text = '‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–æ–±—Ä–∏–≤–∞ (–Ω–∞ 1 –≥–∞):\n'
    fert_text += f'   - –ê–∑–æ—Ç: {N_fert_per_ha:.1f} –∫–≥ ‚Äî {N_form}\n'
    fert_text += f'   - –§–æ—Å—Ñ–æ—Ä: {P_fert_per_ha:.1f} –∫–≥ ‚Äî {P_form}\n'
    fert_text += f'   - –ö–∞–ª—ñ–π: {K_fert_per_ha:.1f} –∫–≥ ‚Äî {K_form}\n'
    await state.set_state(FertilizerCalculation.form_choice)
    form_kb = create_keyboard(['–ó–º—ñ–Ω–∏—Ç–∏ –∞–∑–æ—Ç', '–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Å—Ñ–æ—Ä', '–ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–ª—ñ–π', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏'], add_back=True)
    await message.answer(fert_text, reply_markup=form_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–ª–æ—â—ñ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ—Ç—Ä–µ–±–∏
@dp.message(FertilizerCalculation.area)
async def calculate_total_need(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    if text.endswith('–ù–∞–∑–∞–¥'):
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –∑–º—ñ–Ω–∏ —Ñ–æ—Ä–º –¥–æ–±—Ä–∏–≤
        await state.set_state(FertilizerCalculation.form_choice)
        form_kb = create_keyboard(['–ó–º—ñ–Ω–∏—Ç–∏ –∞–∑–æ—Ç', '–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Å—Ñ–æ—Ä', '–ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–ª—ñ–π', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏'], add_back=True)
        await message.answer('‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –¥—ñ—ó –ø–µ—Ä–µ–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º –ø–ª–æ—â—ñ:', reply_markup=form_kb)
        return
    if text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ –±–µ–∑ –≤–∫–∞–∑–∞–Ω–Ω—è –ø–ª–æ—â—ñ (–∑–∞–ª–∏—à–∞—î–º–æ –¥–∞–Ω—ñ –Ω–∞ 1 –≥–∞)
        await message.answer('‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ PDF –∑–≤—ñ—Ç.')
        usage_count[user_id] = usage_count.get(user_id, 0) + 1
        data = await state.get_data()
        final_recommendation = ''
        crop = data.get('crop', '')
        if crop:
            crop_name = crop.capitalize()
            final_recommendation += f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è {crop_name}\n'
        if 'N_per_ha' in data:
            N_per_ha = data['N_per_ha']; P_per_ha = data['P_per_ha']; K_per_ha = data['K_per_ha']
            final_recommendation += f'–ê–∑–æ—Ç: {N_per_ha:.1f} –∫–≥/–≥–∞; –§–æ—Å—Ñ–æ—Ä: {P_per_ha:.1f} –∫–≥/–≥–∞; –ö–∞–ª—ñ–π: {K_per_ha:.1f} –∫–≥/–≥–∞\n'
        if 'N_form' in data:
            N_content = data['N_content']; P_content = data['P_content']; K_content = data['K_content']
            N_fert = data['N_per_ha'] / N_content
            P_fert = data['P_per_ha'] / P_content
            K_fert = data['K_per_ha'] / K_content
            final_recommendation += '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∏ –¥–æ–±—Ä–∏–≤ –Ω–∞ 1 –≥–∞:\n'
            final_recommendation += ' - ' + data['N_form'] + ': ' + '{:.1f}'.format(N_fert) + ' –∫–≥/–≥–∞\n'
            final_recommendation += ' - ' + data['P_form'] + ': ' + '{:.1f}'.format(P_fert) + ' –∫–≥/–≥–∞\n'
            final_recommendation += ' - ' + data['K_form'] + ': ' + '{:.1f}'.format(K_fert) + ' –∫–≥/–≥–∞\n'
        final_recommendations[user_id] = final_recommendation
        await state.clear()
        return
    # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–ª–æ—â—ñ (–≥–∞) —è–∫ —á–∏—Å–ª–∞
    try:
        area_val = float(text.replace(',', '.'))
    except ValueError:
        await message.answer('‚ùó –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ (–≥–∞) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏".')
        return
    if area_val <= 0:
        await message.answer('‚ùó –ü–ª–æ—â–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0.')
        return
    data = await state.get_data()
    crop = data.get('crop', '')
    N_per_ha = data.get('N_per_ha'); P_per_ha = data.get('P_per_ha'); K_per_ha = data.get('K_per_ha')
    N_content = data.get('N_content'); P_content = data.get('P_content'); K_content = data.get('K_content')
    N_form = data.get('N_form'); P_form = data.get('P_form'); K_form = data.get('K_form')
    if N_per_ha is None:
        await message.answer('–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
    else:
        # –û–±—á–∏—Å–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –ø–æ—Ç—Ä–µ–±—É –ø–æ –µ–ª–µ–º–µ–Ω—Ç–∞—Ö –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –ø–ª–æ—â—É
        total_N = N_per_ha * area_val
        total_P = P_per_ha * area_val
        total_K = K_per_ha * area_val
        total_text = f'üî∏ –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ—Ç—Ä–µ–±–∞ –Ω–∞ –ø–ª–æ—â—É {area_val:.1f} –≥–∞:\n'
        total_text += f'   - –ê–∑–æ—Ç (N): {total_N:.1f} –∫–≥\n'
        total_text += f'   - –§–æ—Å—Ñ–æ—Ä (P): {total_P:.1f} –∫–≥\n'
        total_text += f'   - –ö–∞–ª—ñ–π (K): {total_K:.1f} –∫–≥\n'
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ —Ñ—ñ–∑–∏—á–Ω—É –º–∞—Å—É –¥–æ–±—Ä–∏–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö —Ñ–æ—Ä–º
        total_N_fert = total_N / N_content
        total_P_fert = total_P / P_content
        total_K_fert = total_K / K_content
        total_text += 'üí∞ –£ —Ñ—ñ–∑–∏—á–Ω—ñ–π –º–∞—Å—ñ –¥–æ–±—Ä–∏–≤ —Ü–µ –ø—Ä–∏–±–ª–∏–∑–Ω–æ:\n'
        total_text += f'   - {N_form}: {total_N_fert:.1f} –∫–≥\n'
        total_text += f'   - {P_form}: {total_P_fert:.1f} –∫–≥\n'
        total_text += f'   - {K_form}: {total_K_fert:.1f} –∫–≥'
        await message.answer(total_text)
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è PDF –∑–≤—ñ—Ç—É
        crop_name = crop.capitalize() if crop else ''
        final_recommendation = f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è {crop_name} (–Ω–∞ {area_val:.1f} –≥–∞):\n'
        final_recommendation += f'–í–º—ñ—Å—Ç –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ 1 –≥–∞: N {N_per_ha:.1f} –∫–≥, P {P_per_ha:.1f} –∫–≥, K {K_per_ha:.1f} –∫–≥.\n'
        final_recommendation += f'–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞ –Ω–∞ 1 –≥–∞: {N_form} {(N_per_ha/N_content):.1f} –∫–≥, {P_form} {(P_per_ha/P_content):.1f} –∫–≥, {K_form} {(K_per_ha/K_content):.1f} –∫–≥.\n'
        final_recommendation += f'–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ—Ç—Ä–µ–±–∞ –Ω–∞ {area_val:.1f} –≥–∞: {N_form} {total_N_fert:.1f} –∫–≥, {P_form} {total_P_fert:.1f} –∫–≥, {K_form} {total_K_fert:.1f} –∫–≥.'
        final_recommendations[user_id] = final_recommendation
    usage_count[user_id] = usage_count.get(user_id, 0) + 1
    await state.clear()
    await message.answer('‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ PDF –∑–≤—ñ—Ç –∫–æ–º–∞–Ω–¥–æ—é /start.')

# –û–±—Ä–æ–±–Ω–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF –∑–≤—ñ—Ç—É
@dp.callback_query(lambda c: c.data == 'get_pdf')
async def send_pdf(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    pdf_content = final_recommendations.get(user_id, '')
    if not pdf_content:
        pdf_content = '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π. –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–ø–æ—á–∞—Ç–∫—É.'
    pdf_file = await generate_pdf(pdf_content)
    from aiogram.types import FSInputFile

await bot.send_document(chat_id=user_id, document=FSInputFile(pdf_file))

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ –∫—É–ª—å—Ç—É—Ä (–ø–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞)
@dp.callback_query(lambda c: c.data == 'crop_guide')
async def show_crop_guide(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer('‚ÑπÔ∏è –î–æ–≤—ñ–¥–Ω–∏–∫ –∫—É–ª—å—Ç—É—Ä –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.')

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–¥–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–ø–ª–∞—Ç–∏ (LiqPay)
@dp.pre_checkout_query(lambda query: True)
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏
@dp.message(lambda message: message.successful_payment is not None)
async def payment_successful(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    payment_count[user_id] = payment_count.get(user_id, 0) + 1
    await message.answer('‚úÖ –û–ø–ª–∞—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫.')
    # –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
    await state.set_state(FertilizerCalculation.crop)
    crop_kb = create_keyboard(crops)
    await message.answer('üåæ –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:', reply_markup=crop_kb)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
