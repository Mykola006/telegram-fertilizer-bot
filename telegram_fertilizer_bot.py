import os
import asyncio
import logging
import numpy as np
import pandas as pd
import requests
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤, “ë—Ä—É–Ω—Ç—ñ–≤ —Ç–∞ –∫—É–ª—å—Ç—É—Ä
regions = [
    "–í–æ–ª–∏–Ω—Å—å–∫–∞", "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞", "–î–æ–Ω–µ—Ü—å–∫–∞", "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞", "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞", "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞", "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞",
    "–ö–∏—ó–≤—Å—å–∫–∞", "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞", "–õ—É–≥–∞–Ω—Å—å–∫–∞", "–õ—å–≤—ñ–≤—Å—å–∫–∞", "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞", "–û–¥–µ—Å—å–∫–∞", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞",
    "–°—É–º—Å—å–∫–∞", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞", "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞", "–ß–µ—Ä–∫–∞—Å—å–∫–∞", "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞"
]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—É–ø—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–ü—ñ–¥–∑–æ–ª–∏—Å—Ç–∏–π", "–¢–æ—Ä—Ñ–æ–≤–∏–π"]
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è", "–ì–æ—Ä–æ—Ö", "–¶—É–∫—Ä–æ–≤–∏–π –±—É—Ä—è–∫", "–ö–∞—Ä—Ç–æ–ø–ª—è"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]

# –û–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ç—Ä–µ–± —É –¥–æ–±—Ä–∏–≤–∞—Ö –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ—ó –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ
fertilizer_db = {
    "–ü—à–µ–Ω–∏—Ü—è": {"N": 30, "P": 12, "K": 18, "pH": 6.2},
    "–ö—É–∫—É—Ä—É–¥–∑–∞": {"N": 35, "P": 14, "K": 20, "pH": 6.5},
    "–°–æ–Ω—è—à–Ω–∏–∫": {"N": 25, "P": 10, "K": 15, "pH": 6.3},
    "–†—ñ–ø–∞–∫": {"N": 40, "P": 16, "K": 22, "pH": 6.5},
    "–Ø—á–º—ñ–Ω—å": {"N": 28, "P": 11, "K": 17, "pH": 6.1},
    "–°–æ—è": {"N": 20, "P": 9, "K": 14, "pH": 6.8},
    "–ì–æ—Ä–æ—Ö": {"N": 15, "P": 7, "K": 10, "pH": 6.7},
    "–¶—É–∫—Ä–æ–≤–∏–π –±—É—Ä—è–∫": {"N": 50, "P": 20, "K": 30, "pH": 6.3},
    "–ö–∞—Ä—Ç–æ–ø–ª—è": {"N": 45, "P": 18, "K": 25, "pH": 5.8}
}

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏

def create_keyboard(options):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=option)] for option in options],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤")]],
        resize_keyboard=True
    )
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.", reply_markup=keyboard)

@dp.message(F.text == "üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤")
async def fertilizer_calculation(message: types.Message):
    keyboard = create_keyboard(crops)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=keyboard)

@dp.message(F.text.in_(crops))
async def get_crop_choice(message: types.Message):
    crop = message.text
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—É –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å (—Ç/–≥–∞):", reply_markup=ReplyKeyboardRemove())
    dp.fsm_context.set_data({"crop": crop})

@dp.message(F.text.isdigit())
async def get_yield_goal(message: types.Message):
    yield_goal = int(message.text)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–ª–æ—â—É –ø–æ–ª—è (–≥–∞):")
    dp.fsm_context.update_data({"yield_goal": yield_goal})

@dp.message(F.text.isdigit())
async def get_field_area(message: types.Message):
    area = int(message.text)
    data = await dp.fsm_context.get_data()
    crop = data.get("crop", "–ö—É–∫—É—Ä—É–¥–∑–∞")
    yield_goal = data.get("yield_goal", 5)
    fertilizers = calculate_fertilizer_rates(crop, yield_goal)
    total_cost = calculate_total_cost(fertilizers, area)
    result = f"üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:
    üîπ –ö—É–ª—å—Ç—É—Ä–∞: {crop}
    üîπ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å: {yield_goal} —Ç/–≥–∞
    üîπ –ó–∞–≥–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞: {area} –≥–∞
    üîπ –î–æ–±—Ä–∏–≤–∞:
    - –ê–∑–æ—Ç (N): {fertilizers['N']} –∫–≥/–≥–∞
    - –§–æ—Å—Ñ–æ—Ä (P): {fertilizers['P']} –∫–≥/–≥–∞
    - –ö–∞–ª—ñ–π (K): {fertilizers['K']} –∫–≥/–≥–∞
    üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_cost:.2f} USD"
    await message.answer(result, reply_markup=ReplyKeyboardRemove())

async def main():
    logging.basicConfig(level=logging.INFO)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
