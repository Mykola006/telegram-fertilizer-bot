import os

try:
    import requests
except ModuleNotFoundError:
    import os
    os.system("pip install requests")
    import requests

try:
    import matplotlib.pyplot as plt
except ModuleNotFoundError:
    import os
    os.system("pip install matplotlib")
    import matplotlib.pyplot as plt

import numpy as np
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import logging
import asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ø–∏—Å–æ–∫ –∫—É–ª—å—Ç—É—Ä, —Ç–∏–ø—ñ–≤ “ë—Ä—É–Ω—Ç—É, –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤, –æ–±–ª–∞—Å—Ç–µ–π
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—É–ø—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–ü—ñ–¥–∑–æ–ª–∏—Å—Ç–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–û–ª—ñ–π–Ω—ñ"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]
regions = ["–ö–∏—ó–≤—Å—å–∫–∞", "–õ—å–≤—ñ–≤—Å—å–∫–∞", "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", "–û–¥–µ—Å—å–∫–∞", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", "–ß–µ—Ä–∫–∞—Å—å–∫–∞"]

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫—É–ª—å—Ç—É—Ä —Ç–∞ –ø–æ—Ç—Ä–µ–± —É –¥–æ–±—Ä–∏–≤–∞—Ö
fertilizer_db = {
    "–ü—à–µ–Ω–∏—Ü—è": {"N": 120, "P": 60, "K": 90, "pH": 6.2},
    "–ö—É–∫—É—Ä—É–¥–∑–∞": {"N": 150, "P": 80, "K": 100, "pH": 6.5},
    "–°–æ–Ω—è—à–Ω–∏–∫": {"N": 90, "P": 50, "K": 70, "pH": 6.3},
    "–†—ñ–ø–∞–∫": {"N": 180, "P": 90, "K": 110, "pH": 6.5},
    "–Ø—á–º—ñ–Ω—å": {"N": 110, "P": 55, "K": 80, "pH": 6.1},
    "–°–æ—è": {"N": 50, "P": 40, "K": 60, "pH": 6.8}
}

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
price_per_kg = {"N": 0.8, "P": 1.2, "K": 1.0}  # –¶—ñ–Ω–∏ –Ω–∞ –¥–æ–±—Ä–∏–≤–∞

# –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–æ–±—Ä–∏–≤
def calculate_fertilizer_cost(fertilizer_rates):
    return sum(fertilizer_rates[element] * price_per_kg[element] for element in fertilizer_rates)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —É–º–æ–≤ –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è
def advanced_fertilizer_analysis(crop, soil, prev_crop, region):
    base_fertilizers = fertilizer_db[crop]
    # –í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–ª—ñ–º–∞—Ç–∏—á–Ω–∏—Ö —É–º–æ–≤
    climatic_factors = {"–ö–∏—ó–≤—Å—å–∫–∞": 1.0, "–õ—å–≤—ñ–≤—Å—å–∫–∞": 1.1, "–û–¥–µ—Å—å–∫–∞": 0.9, "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞": 1.05}
    climate_adjustment = climatic_factors.get(region, 1.0)
    
    # –í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –ø–æ–∂–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω
    prev_crop_impact = {"–ó–µ—Ä–Ω–æ–≤—ñ": {"N": -10, "P": 0, "K": -5}, "–ë–æ–±–æ–≤—ñ": {"N": 20, "P": 5, "K": 10}}
    crop_impact = prev_crop_impact.get(prev_crop, {"N": 0, "P": 0, "K": 0})
    
    adjusted_fertilizers = {
        "N": max(0, base_fertilizers["N"] + crop_impact["N"] * climate_adjustment),
        "P": max(0, base_fertilizers["P"] + crop_impact["P"] * climate_adjustment),
        "K": max(0, base_fertilizers["K"] + crop_impact["K"] * climate_adjustment),
    }
    
    return adjusted_fertilizers, calculate_fertilizer_cost(adjusted_fertilizers)

@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton("üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")],
        [KeyboardButton("üìä –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑"), KeyboardButton("üí∞ –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏")],
        [KeyboardButton("üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç")]
    ])
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)

@dp.message(lambda message: message.text == "üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç")
async def send_report(message: types.Message):
    crop = "–ö—É–∫—É—Ä—É–¥–∑–∞"
    soil = "–ß–æ—Ä–Ω–æ–∑–µ–º"
    prev_crop = "–ó–µ—Ä–Ω–æ–≤—ñ"
    region = "–ö–∏—ó–≤—Å—å–∫–∞"
    fertilizers, cost = advanced_fertilizer_analysis(crop, soil, prev_crop, region)
    data = f"""
    üöú **–ê–≥—Ä–æ–∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –∑–≤—ñ—Ç**
    üìç –ö—É–ª—å—Ç—É—Ä–∞: {crop}
    üå± –¢–∏–ø “ë—Ä—É–Ω—Ç—É: {soil}
    üîÑ –ü–æ–ø–µ—Ä–µ–¥–Ω–∏–∫: {prev_crop}
    üìç –†–µ–≥—ñ–æ–Ω: {region}
    üìä –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞:
    - –ê–∑–æ—Ç (N): {fertilizers['N']} –∫–≥/–≥–∞
    - –§–æ—Å—Ñ–æ—Ä (P): {fertilizers['P']} –∫–≥/–≥–∞
    - –ö–∞–ª—ñ–π (K): {fertilizers['K']} –∫–≥/–≥–∞
    üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {cost} $/–≥–∞
    """
    with open("fertilizer_report.txt", "w", encoding="utf-8") as file:
        file.write(data)
    await message.answer_document(InputFile("fertilizer_report.txt"))

async def main():
    logging.basicConfig(level=logging.INFO)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
