import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, 
                           InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.callback_data import CallbackData
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=types.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton("üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É"))
main_keyboard.add(KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"))

# Callback –¥–ª—è –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏
crop_callback = CallbackData("crop", "name")

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ –∫—É–ª—å—Ç—É—Ä
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—É–ø—ñ—â–∞–Ω–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π"]
previous_crops = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–¢–µ—Ö–Ω—ñ—á–Ω—ñ"]
moisture_zones = ["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–î–æ—Å—Ç–∞—Ç–Ω—è"]

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", 
                         reply_markup=create_keyboard(crops, crop_callback))

def create_keyboard(options, callback):
    markup = InlineKeyboardMarkup()
    for option in options:
        markup.add(InlineKeyboardButton(text=option, callback_data=callback.new(name=option)))
    return markup

@dp.callback_query_handler(crop_callback.filter())
async def select_soil(callback_query: types.CallbackQuery, callback_data: dict):
    crop = callback_data["name"]
    await bot.send_message(callback_query.from_user.id, f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {crop}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:",
                           reply_markup=create_keyboard(soil_types, crop_callback))

# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤
async def calculate_fertilizer(crop, soil, prev_crop, moisture, yield_goal):
    # –ë–∞–∑–æ–≤—ñ –Ω–æ—Ä–º–∏ –≤–∏–Ω–æ—Å—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∂–∏–≤–ª–µ–Ω–Ω—è –Ω–∞ 1 —Ç –≤—Ä–æ–∂–∞—é
    nutrient_needs = {
        "–ü—à–µ–Ω–∏—Ü—è": {"N": 30, "P": 12, "K": 25},
        "–ö—É–∫—É—Ä—É–¥–∑–∞": {"N": 27, "P": 11, "K": 24},
        "–°–æ–Ω—è—à–Ω–∏–∫": {"N": 50, "P": 15, "K": 60},
        "–†—ñ–ø–∞–∫": {"N": 70, "P": 20, "K": 45},
        "–°–æ—è": {"N": 40, "P": 10, "K": 30}
    }
    
    # –í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É “ë—Ä—É–Ω—Ç—É
    soil_adjustment = {"–ß–æ—Ä–Ω–æ–∑–µ–º": 1.0, "–°—É–ø—ñ—â–∞–Ω–∏–π": 1.2, "–ì–ª–∏–Ω–∏—Å—Ç–∏–π": 0.8}
    
    # –í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∞
    prev_crop_adjustment = {"–ó–µ—Ä–Ω–æ–≤—ñ": 1.1, "–ë–æ–±–æ–≤—ñ": 0.7, "–¢–µ—Ö–Ω—ñ—á–Ω—ñ": 1.3}
    
    # –ö—ñ–Ω—Ü–µ–≤—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
    n_need = nutrient_needs[crop]["N"] * yield_goal * soil_adjustment[soil] * prev_crop_adjustment[prev_crop]
    p_need = nutrient_needs[crop]["P"] * yield_goal * soil_adjustment[soil] * prev_crop_adjustment[prev_crop]
    k_need = nutrient_needs[crop]["K"] * yield_goal * soil_adjustment[soil] * prev_crop_adjustment[prev_crop]
    
    return {
        "N": round(n_need),
        "P": round(p_need),
        "K": round(k_need),
        "Recommendation": f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –Ω–æ—Ä–º–∏: N-{round(n_need)} –∫–≥/–≥–∞, P-{round(p_need)} –∫–≥/–≥–∞, K-{round(k_need)} –∫–≥/–≥–∞"
    }

@dp.callback_query_handler()
async def show_fertilizer_recommendation(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    crop, soil, prev_crop, moisture, yield_goal = "–ö—É–∫—É—Ä—É–¥–∑–∞", "–ß–æ—Ä–Ω–æ–∑–µ–º", "–ó–µ—Ä–Ω–æ–≤—ñ", "–°–µ—Ä–µ–¥–Ω—è", 6  # –ü—Ä–∏–∫–ª–∞–¥ –∑–Ω–∞—á–µ–Ω—å
    result = await calculate_fertilizer(crop, soil, prev_crop, moisture, yield_goal)
    
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí∞ –í—Ä–∞—Ö—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ “ë—Ä—É–Ω—Ç—É", callback_data="consider_analysis"),
        InlineKeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∫–∏ –¥–æ–±—Ä–∏–≤", callback_data="change_fertilizer"),
    )
    
    await bot.send_message(user_id, result["Recommendation"], reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—Ä–∞—Ö—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ “ë—Ä—É–Ω—Ç—É"
@dp.callback_query_handler(lambda c: c.data == "consider_analysis")
async def consider_analysis(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É “ë—Ä—É–Ω—Ç—É:")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    from aiogram import executor
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling())
