import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ‚ö° –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")],
        [KeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")]
    ],
    resize_keyboard=True
)

# üîπ –í–∞—Ä—ñ–∞–Ω—Ç–∏ –∫—É–ª—å—Ç—É—Ä
crops = ["–ü—à–µ–Ω–∏—Ü—è", "–ö—É–∫—É—Ä—É–¥–∑–∞", "–°–æ–Ω—è—à–Ω–∏–∫", "–†—ñ–ø–∞–∫", "–Ø—á–º—ñ–Ω—å", "–°–æ—è"]
soil_types = ["–ß–æ—Ä–Ω–æ–∑–µ–º", "–°—ñ—Ä–æ–∑–µ–º", "–ü—ñ–¥–∑–æ–ª–∏—Å—Ç–∏–π", "–ì–ª–∏–Ω–∏—Å—Ç–∏–π", "–°—É–ø—ñ—â–∞–Ω–∏–π"]
previous_crops_groups = ["–ó–µ—Ä–Ω–æ–≤—ñ", "–ë–æ–±–æ–≤—ñ", "–¢–µ—Ö–Ω—ñ—á–Ω—ñ", "–û–≤–æ—á—ñ", "–ß–∏—Å—Ç–∏–π –ø–∞—Ä"]

# üìå –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=main_keyboard)

# üå± –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä–∏
@dp.message(lambda message: message.text == "üå± –û–±—Ä–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä—É")
async def select_crop(message: types.Message):
    crop_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=crop)] for crop in crops],
        resize_keyboard=True
    )
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=crop_keyboard)

# üèî –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É “ë—Ä—É–Ω—Ç—É
@dp.message(lambda message: message.text in crops)
async def select_soil(message: types.Message):
    selected_crop = message.text
    soil_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=soil)] for soil in soil_types],
        resize_keyboard=True
    )
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {selected_crop}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø “ë—Ä—É–Ω—Ç—É:", reply_markup=soil_keyboard)

# üåæ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∞ (–≥—Ä—É–ø–∞ –∫—É–ª—å—Ç—É—Ä)
@dp.message(lambda message: message.text in soil_types)
async def select_previous_crop(message: types.Message):
    selected_soil = message.text
    prev_crop_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=prev)] for prev in previous_crops_groups],
        resize_keyboard=True
    )
    await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ {selected_soil}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫ (–≥—Ä—É–ø—É –∫—É–ª—å—Ç—É—Ä):", reply_markup=prev_crop_keyboard)

# üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
fertilizer_data = {
    "–ó–µ—Ä–Ω–æ–≤—ñ": {"complex_fertilizer": "NPK 10-26-26", "complex_rate": 150, "nitrogen_fertilizer": "–ö–∞—Ä–±–∞–º—ñ–¥", "nitrogen_rate": 100, "sulfur_fertilizer": "–°—É–ª—å—Ñ–∞—Ç –∞–º–æ–Ω—ñ—é", "sulfur_rate": 50, "cost": 120},
    "–ë–æ–±–æ–≤—ñ": {"complex_fertilizer": "NPK 15-15-15", "complex_rate": 180, "nitrogen_fertilizer": "–ö–∞—Ä–±–∞–º—ñ–¥", "nitrogen_rate": 80, "sulfur_fertilizer": "–°—É–ª—å—Ñ–∞—Ç –∞–º–æ–Ω—ñ—é", "sulfur_rate": 60, "cost": 110},
    "–¢–µ—Ö–Ω—ñ—á–Ω—ñ": {"complex_fertilizer": "NPK 12-24-12", "complex_rate": 160, "nitrogen_fertilizer": "–ö–∞—Ä–±–∞–º—ñ–¥", "nitrogen_rate": 110, "sulfur_fertilizer": "–°—É–ª—å—Ñ–∞—Ç –∞–º–æ–Ω—ñ—é", "sulfur_rate": 55, "cost": 130},
    "–û–≤–æ—á—ñ": {"complex_fertilizer": "NPK 8-20-30", "complex_rate": 200, "nitrogen_fertilizer": "–°–µ–ª—ñ—Ç—Ä–∞", "nitrogen_rate": 90, "sulfur_fertilizer": "–°—É–ª—å—Ñ–∞—Ç –∫–∞–ª—ñ—é", "sulfur_rate": 70, "cost": 140},
    "–ß–∏—Å—Ç–∏–π –ø–∞—Ä": {"complex_fertilizer": "NPK 10-20-20", "complex_rate": 140, "nitrogen_fertilizer": "–°–µ–ª—ñ—Ç—Ä–∞", "nitrogen_rate": 70, "sulfur_fertilizer": "–°—É–ª—å—Ñ–∞—Ç –∞–º–æ–Ω—ñ—é", "sulfur_rate": 45, "cost": 100},
}

# üìù –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∞ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–±—Ä–∏–≤
@dp.message(lambda message: message.text in previous_crops_groups)
async def calculate_fertilizer(message: types.Message):
    selected_previous_crop = message.text
    recommendation = fertilizer_data.get(selected_previous_crop, fertilizer_data["–ó–µ—Ä–Ω–æ–≤—ñ"])
    await message.answer(
        f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∞ {selected_previous_crop}:
        \nüìå –ö–æ–º–ø–ª–µ–∫—Å–Ω–µ –¥–æ–±—Ä–∏–≤–æ: {recommendation['complex_fertilizer']}, {recommendation['complex_rate']} –∫–≥/–≥–∞
        \nüìå –ê–∑–æ—Ç–Ω—ñ –¥–æ–±—Ä–∏–≤–∞: {recommendation['nitrogen_fertilizer']}, {recommendation['nitrogen_rate']} –∫–≥/–≥–∞
        \nüìå –°—ñ—Ä—á–∞–Ω—ñ –¥–æ–±—Ä–∏–≤–∞: {recommendation['sulfur_fertilizer']}, {recommendation['sulfur_rate']} –∫–≥/–≥–∞
        \nüí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {recommendation['cost']}$/–≥–∞",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîÑ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫—É–ª—å—Ç—É—Ä—É")],
                [KeyboardButton(text="‚öôÔ∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∂–∏–≤–ª–µ–Ω–Ω—è")],
            ],
            resize_keyboard=True
        )
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
